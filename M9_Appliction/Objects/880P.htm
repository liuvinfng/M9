<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\880P.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\880P.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Thu Jan 09 17:46:28 2020
<BR><P>
<H3>Maximum Stack Usage =        792 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
Task_MainTask &rArr; Spot_Mode &rArr; CM_WallToMap &rArr; CM_WallFollowByCnt &rArr; CM_AbnormalHandler &rArr; ActList_Switch &rArr; Action_Head2Cource &rArr; CM_HeadToTarget &rArr; CM_HeadToCourse &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1d]">ADC0_1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">ADC0_1_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1d]">ADC0_1_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[3a]">ADC2_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[5]">BusFault_Handler</a> from gd32f30x_it.o(i.BusFault_Handler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[21]">CAN0_EWMC_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[20]">CAN0_RX1_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[16]">DMA0_Channel0_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[17]">DMA0_Channel1_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[18]">DMA0_Channel2_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[19]">DMA0_Channel3_IRQHandler</a> from gd32f30x_it.o(i.DMA0_Channel3_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[1a]">DMA0_Channel4_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[1b]">DMA0_Channel5_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[1c]">DMA0_Channel6_IRQHandler</a> from gd32f30x_it.o(i.DMA0_Channel6_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[43]">DMA1_Channel0_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[44]">DMA1_Channel1_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[45]">DMA1_Channel2_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[46]">DMA1_Channel3_4_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[8]">DebugMon_Handler</a> from gd32f30x_it.o(i.DebugMon_Handler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[3b]">EXMC_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[11]">EXTI0_IRQHandler</a> from gd32f30x_it.o(i.EXTI0_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[33]">EXTI10_15_IRQHandler</a> from gd32f30x_it.o(i.EXTI10_15_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[12]">EXTI1_IRQHandler</a> from gd32f30x_it.o(i.EXTI1_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[13]">EXTI2_IRQHandler</a> from gd32f30x_it.o(i.EXTI2_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[14]">EXTI3_IRQHandler</a> from gd32f30x_it.o(i.EXTI3_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[15]">EXTI4_IRQHandler</a> from gd32f30x_it.o(i.EXTI4_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[22]">EXTI5_9_IRQHandler</a> from gd32f30x_it.o(i.EXTI5_9_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[f]">FMC_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[3]">HardFault_Handler</a> from gd32f30x_it.o(i.HardFault_Handler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[2b]">I2C0_ER_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[2a]">I2C0_EV_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[2d]">I2C1_ER_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[2c]">I2C1_EV_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[c]">LVD_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[4]">MemManage_Handler</a> from gd32f30x_it.o(i.MemManage_Handler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[2]">NMI_Handler</a> from gd32f30x_it.o(i.NMI_Handler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[10]">RCU_CTC_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[34]">RTC_Alarm_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[e]">RTC_IRQHandler</a> from gd32f30x_it.o(i.RTC_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[1]">Reset_Handler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[3c]">SDIO_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[2e]">SPI0_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[2f]">SPI1_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[3e]">SPI2_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[7]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from gd32f30x_it.o(i.SysTick_Handler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[48]">SystemInit</a> from system_gd32f30x.o(i.SystemInit) referenced from startup_gd32f30x_hd.o(.text)
 <LI><a href="#[d]">TAMPER_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[23]">TIMER0_BRK_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[26]">TIMER0_Channel_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[25]">TIMER0_TRG_CMT_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[24]">TIMER0_UP_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[27]">TIMER1_IRQHandler</a> from gd32f30x_it.o(i.TIMER1_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[28]">TIMER2_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[29]">TIMER3_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[3d]">TIMER4_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[41]">TIMER5_IRQHandler</a> from gd32f30x_it.o(i.TIMER5_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[42]">TIMER6_IRQHandler</a> from gd32f30x_it.o(i.TIMER6_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[36]">TIMER7_BRK_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[39]">TIMER7_Channel_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[38]">TIMER7_TRG_CMT_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[37]">TIMER7_UP_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[4d]">Task_CalculatePathTask</a> from projecttask.o(i.Task_CalculatePathTask) referenced from projecttask.o(i.Task_CreateCalculatePathTask)
 <LI><a href="#[4b]">Task_ControlTask</a> from projecttask.o(i.Task_ControlTask) referenced from projecttask.o(i.Task_CraeteControlTask)
 <LI><a href="#[4e]">Task_MainTask</a> from main.o(i.Task_MainTask) referenced from projecttask.o(i.Task_CreateMainTask)
 <LI><a href="#[4c]">Task_SensorsTask</a> from projecttask.o(i.Task_SensorsTask) referenced from projecttask.o(i.Task_CraeteSensorsTask)
 <LI><a href="#[3f]">UART3_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[40]">UART4_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[30]">USART0_IRQHandler</a> from gd32f30x_it.o(i.USART0_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[31]">USART1_IRQHandler</a> from gd32f30x_it.o(i.USART1_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[32]">USART2_IRQHandler</a> from gd32f30x_it.o(i.USART2_IRQHandler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[4a]">USART3_PrintStringByLength</a> from usart.o(i.USART3_PrintStringByLength) referenced from debug.o(i.PC_NavDebug)
 <LI><a href="#[4a]">USART3_PrintStringByLength</a> from usart.o(i.USART3_PrintStringByLength) referenced from debug.o(i.mPC_NavDebug)
 <LI><a href="#[4f]">USART3_PrintTask</a> from usart.o(i.USART3_PrintTask) referenced from usart.o(i.USART3_CreateTask)
 <LI><a href="#[1e]">USBD_HP_CAN0_TX_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[1f]">USBD_LP_CAN0_RX0_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[35]">USBD_WKUP_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[6]">UsageFault_Handler</a> from gd32f30x_it.o(i.UsageFault_Handler) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[b]">WWDGT_IRQHandler</a> from startup_gd32f30x_hd.o(.text) referenced from startup_gd32f30x_hd.o(RESET)
 <LI><a href="#[49]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_gd32f30x_hd.o(.text)
 <LI><a href="#[47]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[51]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[50]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[49]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(.text)
</UL>
<P><STRONG><a name="[321]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[52]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[69]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[322]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[323]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[324]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[325]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[326]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[319]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[318]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30b]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[1]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>ADC0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>ADC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>CAN0_EWMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN0_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA0_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA0_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA0_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA0_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA0_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA1_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA1_Channel3_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>EXMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C0_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C0_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RCU_CTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIMER0_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIMER0_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIMER0_TRG_CMT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIMER0_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIMER7_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIMER7_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIMER7_TRG_CMT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIMER7_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USBD_HP_CAN0_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>USBD_LP_CAN0_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>USBD_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>WWDGT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f30x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_Current_Filter
</UL>

<P><STRONG><a name="[2f7]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>

<P><STRONG><a name="[327]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[328]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[329]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[32a]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[58]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1cb]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_NavDebug
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mPC_NavDebug
</UL>

<P><STRONG><a name="[32b]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[5a]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[312]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[5b]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_TwoCell_Dis
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_MoveRobotCountTo
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRelativeY
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRelativeXY
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRelativeByCell
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_CountToCell
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_IsLaneCleaned
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>

<P><STRONG><a name="[5f]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_TwoCell_Dis
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRelativeXY
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRelativeX
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRelativeByCell
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_CountToCell
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[60]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[61]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_UpdatePosition
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_TwoCell_Dis
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRelativeY
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRelativeXY
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRelativeX
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRelativeByCell
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_Deg2Rad
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_Absolute
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_IsLaneCleaned
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_Rad2Deg
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>

<P><STRONG><a name="[62]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_UpdatePosition
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_GetRobotDirection
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRelativeY
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRelativeXY
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRelativeX
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRelativeByCell
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_CountToCell
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_Deg2Rad
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_Course2Dest
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_IsLaneCleaned
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_Rad2Deg
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
</UL>

<P><STRONG><a name="[63]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_UpdatePosition
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_Mode
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_TwoCell_Dis
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_SetRobotCell
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_PointToCell
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRelativeY
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRelativeXY
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRelativeX
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRelativeByCell
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_HeadToTarget
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_Deg2Rad
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_Course2Dest
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_PathPlanning
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_IsLaneCleaned
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_GetPointLaneIdx
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_Rad2Deg
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[64]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_GetRobotDirection
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRelativeY
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRelativeX
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[65]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_Mode
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRobotCountY
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRobotCountX
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRelativeY
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRelativeXY
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRelativeX
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRelativeByCell
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_CountToCell
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_Course2Dest
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRobotCount
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_PathPlanning
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_IsLaneCleaned
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_GetPointLaneIdx
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[66]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_GetRobotDirection
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_TwoCell_Dis
</UL>

<P><STRONG><a name="[211]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_IsLaneCleaned
</UL>

<P><STRONG><a name="[1a2]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_CountToCell
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_Absolute
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_IsLaneCleaned
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
</UL>

<P><STRONG><a name="[210]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_IsLaneCleaned
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
</UL>

<P><STRONG><a name="[57]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
</UL>

<P><STRONG><a name="[32c]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
</UL>

<P><STRONG><a name="[32d]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[5c]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[32e]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[32f]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
</UL>

<P><STRONG><a name="[5d]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>

<P><STRONG><a name="[67]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>

<P><STRONG><a name="[68]"></a>_drnd</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, drnd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _drnd &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
</UL>

<P><STRONG><a name="[53]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[330]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[331]"></a>__I$use$semihosting$fputc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, iusesemip.o(.text), UNUSED)

<P><STRONG><a name="[332]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[333]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[334]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, semi.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>AC_RealMap_AddPoint</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, sysinitialize.o(i.AC_RealMap_AddPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = AC_RealMap_AddPoint &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_UpdatePosition
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_SetCell
</UL>

<P><STRONG><a name="[2ac]"></a>AC_RealMap_GetCnt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sysinitialize.o(i.AC_RealMap_GetCnt))
<BR><BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Report_Map
</UL>

<P><STRONG><a name="[6d]"></a>AC_RealMap_ReadPoint</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, sysinitialize.o(i.AC_RealMap_ReadPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = AC_RealMap_ReadPoint &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Report_Map
</UL>

<P><STRONG><a name="[1ab]"></a>AC_Reset_RealMap</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, sysinitialize.o(i.AC_Reset_RealMap))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_Initialize
</UL>

<P><STRONG><a name="[e5]"></a>AC_SetFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sysinitialize.o(i.AC_SetFlag))
<BR><BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Report_Map
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_Initialize
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MapTouring
</UL>

<P><STRONG><a name="[22c]"></a>ADC_Configuration</STRONG> (Thumb, 272 bytes, Stack size 0 bytes, sysinitialize.o(i.ADC_Configuration))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInitialize
</UL>

<P><STRONG><a name="[70]"></a>ActList_Add</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, wheel.o(i.ActList_Add))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ActList_Add
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_Follow_Mode
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Mode
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HomeStraight_Mode
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActList_WallStraightAndForward
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActList_WallOffEdgeStop
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActList_DecelerateToStop
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActList_Add_HeadingToTarget
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_AbnormalHandler
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActList_BackToStop
</UL>

<P><STRONG><a name="[6e]"></a>ActList_Add_HeadingToTarget</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, cormove.o(i.ActList_Add_HeadingToTarget))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ActList_Add_HeadingToTarget &rArr; ActList_Add
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActList_Add
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_StoreCurrentTargetCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
</UL>

<P><STRONG><a name="[71]"></a>ActList_BackToStop</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, wheel.o(i.ActList_BackToStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ActList_BackToStop &rArr; ActList_Add
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActList_Clear
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActList_Add
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_SetMove
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_Follow_Mode
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
</UL>

<P><STRONG><a name="[72]"></a>ActList_Clear</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wheel.o(i.ActList_Clear))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_Stop
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_Follow_Mode
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Mode
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_DisableAll
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HomeStraight_Mode
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Stop
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActList_WallOffEdgeStop
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActList_DecelerateToStop
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_AbnormalHandler
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActList_BackToStop
</UL>

<P><STRONG><a name="[74]"></a>ActList_DecelerateToStop</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, wheel.o(i.ActList_DecelerateToStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ActList_DecelerateToStop &rArr; ActList_Add
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActList_Clear
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActList_Add
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_SetMove
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
</UL>

<P><STRONG><a name="[141]"></a>ActList_GetCnt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wheel.o(i.ActList_GetCnt))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HomeStraight_Mode
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
</UL>

<P><STRONG><a name="[76]"></a>ActList_GetNext</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, wheel.o(i.ActList_GetNext))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ActList_GetNext
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActList_Switch
</UL>

<P><STRONG><a name="[75]"></a>ActList_Switch</STRONG> (Thumb, 496 bytes, Stack size 24 bytes, wheel.o(i.ActList_Switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = ActList_Switch &rArr; Action_Head2Cource &rArr; CM_HeadToTarget &rArr; CM_HeadToCourse &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_Stop
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_GetRightTargetSpeed
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_GetLeftTargetSpeed
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetLeftSpeed
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_MoveForward
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetRightSpeed
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Turn
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_MoveBack
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Head2Cource
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Deceleration
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActList_GetNext
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_Follow_Mode
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Mode
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HomeStraight_Mode
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_GyroFunction
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_AbnormalHandler
</UL>

<P><STRONG><a name="[81]"></a>ActList_WallOffEdgeStop</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, wheel.o(i.ActList_WallOffEdgeStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ActList_WallOffEdgeStop &rArr; ActList_Add
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActList_Clear
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActList_Add
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_SetMove
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
</UL>

<P><STRONG><a name="[82]"></a>ActList_WallStraightAndForward</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, wheel.o(i.ActList_WallStraightAndForward))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ActList_WallStraightAndForward &rArr; ActList_Add
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActList_Add
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_SetMove
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
</UL>

<P><STRONG><a name="[7f]"></a>Action_Deceleration</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, wheel.o(i.Action_Deceleration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Action_Deceleration &rArr; Wheel_SetTargetSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetTargetSpeed
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_ResetStep
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_SetMove
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnSlip_SetCheckState
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActList_Switch
</UL>

<P><STRONG><a name="[b1]"></a>Action_GetMove</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wheel.o(i.Action_GetMove))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SpeedAccelerationProcess
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_Follow_Mode
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Mode
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HomeStraight_Mode
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_GyroFunction
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_AbnormalHandler
</UL>

<P><STRONG><a name="[7e]"></a>Action_Head2Cource</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, wheel.o(i.Action_Head2Cource))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = Action_Head2Cource &rArr; CM_HeadToTarget &rArr; CM_HeadToCourse &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_ResetStep
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_SetMove
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnSlip_SetCheckState
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnSlip_ResetSlipCnt
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_HeadToTarget
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_GetCurrentTargetCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActList_Switch
</UL>

<P><STRONG><a name="[7d]"></a>Action_MoveBack</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, wheel.o(i.Action_MoveBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Action_MoveBack &rArr; Wheel_SetDir &rArr; Wheel_SetLeftDir
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetTargetSpeed
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_ResetStep
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_SetMove
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetDir
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnSlip_SetCheckState
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_SetCheckState
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetSpeed
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetRightTargetStep
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetLeftTargetStep
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActList_Switch
</UL>

<P><STRONG><a name="[77]"></a>Action_MoveForward</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, wheel.o(i.Action_MoveForward))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Action_MoveForward &rArr; Wheel_SetDir &rArr; Wheel_SetLeftDir
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetTargetStep
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetTargetSpeed
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_ResetStep
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_SetMove
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetDir
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnSlip_SetCheckState
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_SetCheckState
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_Follow_Mode
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HomeStraight_Mode
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActList_Switch
</UL>

<P><STRONG><a name="[8f]"></a>Action_MoveToPoint</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, wheel.o(i.Action_MoveToPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Action_MoveToPoint &rArr; Path_SetCurrentTargetPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetTargetSpeed
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_ResetStep
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_SetMove
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetDir
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnSlip_SetCheckState
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_SetCheckState
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_SetDynamicState
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_SetCurrentTargetPoint
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetRightTargetStep
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetLeftTargetStep
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBS_SetDynamicState
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
</UL>

<P><STRONG><a name="[73]"></a>Action_SetMove</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wheel.o(i.Action_SetMove))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_WaitForMoveEnded
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_Stop
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_Follow_Mode
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Mode
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HomeStraight_Mode
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Stop
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_GyroFunction
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_MoveToPoint
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActList_WallStraightAndForward
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActList_WallOffEdgeStop
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActList_DecelerateToStop
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_Move_Turn
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_Move_Back
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_AbnormalHandler
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_MoveForward
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActList_BackToStop
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Turn
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_MoveBack
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Head2Cource
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Deceleration
</UL>

<P><STRONG><a name="[93]"></a>Action_Stop</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wheel.o(i.Action_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Action_Stop &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActList_Clear
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_Stop
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_ResetStep
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_SetMove
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_GyroFunction
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
</UL>

<P><STRONG><a name="[7c]"></a>Action_Turn</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, wheel.o(i.Action_Turn))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Action_Turn &rArr; Wheel_SetDir &rArr; Wheel_SetLeftDir
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetTargetSpeed
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_ResetStep
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_SetMove
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetDir
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnSlip_SetCheckState
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_SetCheckState
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Direction_SetLastDir
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetRightTargetStep
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetLeftTargetStep
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActList_Switch
</UL>

<P><STRONG><a name="[96]"></a>Action_WaitForMoveEnded</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, wheel.o(i.Action_WaitForMoveEnded))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Action_WaitForMoveEnded
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_GetRightStep
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_GetLeftStep
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_SetMove
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_GetRightTargetStep
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_GetLeftTargetStep
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_Follow_Mode
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Mode
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HomeStraight_Mode
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_AbnormalHandler
</UL>

<P><STRONG><a name="[9b]"></a>Adjust_Home_Path</STRONG> (Thumb, 1874 bytes, Stack size 8 bytes, homestraight.o(i.Adjust_Home_Path))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Adjust_Home_Path &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcon_ResetStatus
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetTargetSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HomeStraight_Mode
</UL>

<P><STRONG><a name="[9d]"></a>Audio</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, speaker.o(i.Audio))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Audio
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_data_set
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER6_IRQHandler
</UL>

<P><STRONG><a name="[232]"></a>Battery_AddCapacity_Current</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, movement.o(i.Battery_AddCapacity_Current))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[a0]"></a>Battery_Capacity_Reset</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, movement.o(i.Battery_Capacity_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Battery_Capacity_Reset &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_GetVoltage
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_MainTask
</UL>

<P><STRONG><a name="[a2]"></a>Battery_Current_Filter</STRONG> (Thumb, 328 bytes, Stack size 24 bytes, movement.o(i.Battery_Current_Filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Battery_Current_Filter &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_GetCurrentBaselineAdc
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_GetVoltage
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ControlTask
</UL>

<P><STRONG><a name="[251]"></a>Battery_GetAdcValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, movement.o(i.Battery_GetAdcValue))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SensorsTask
</UL>

<P><STRONG><a name="[a1]"></a>Battery_GetVoltage</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, movement.o(i.Battery_GetVoltage))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_IsLow
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserInterFace_IsLowPower
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_TunePower
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_Current_Filter
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charge_Process
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Interface
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_Capacity_Reset
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_GyroFunction
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_Move_Turn
</UL>

<P><STRONG><a name="[2a3]"></a>Battery_Get_CapacityLevel</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, movement.o(i.Battery_Get_CapacityLevel))
<BR><BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Even_Report
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_All_Data_Init
</UL>

<P><STRONG><a name="[a4]"></a>Battery_IsLow</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, movement.o(i.Battery_IsLow))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Battery_IsLow
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_GetVoltage
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Mode
</UL>

<P><STRONG><a name="[274]"></a>Battery_SetCheckState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, movement.o(i.Battery_SetCheckState))
<BR><BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserInterFace_BeginToWork
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Interface
</UL>

<P><STRONG><a name="[25b]"></a>Battery_SetVoltage</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, movement.o(i.Battery_SetVoltage))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SensorsTask
</UL>

<P><STRONG><a name="[ab]"></a>Brush_Main_SetPWM</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, brush.o(i.Brush_Main_SetPWM))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_TunePower
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_AbnormalHandler
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_SetState
</UL>

<P><STRONG><a name="[aa]"></a>Brush_Side_SetPWM</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, brush.o(i.Brush_Side_SetPWM))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_TunePower
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_AbnormalHandler
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_SetState
</UL>

<P><STRONG><a name="[a5]"></a>Bumper_CheckProcess</STRONG> (Thumb, 106 bytes, Stack size 4 bytes, movement.o(i.Bumper_CheckProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Bumper_CheckProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bumper_GetTrigStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SensorsTask
</UL>

<P><STRONG><a name="[267]"></a>Bumper_GetCheckState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, movement.o(i.Bumper_GetCheckState))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SensorsTask
</UL>

<P><STRONG><a name="[a6]"></a>Bumper_GetTrigStatus</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, movement.o(i.Bumper_GetTrigStatus))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bumper_CheckProcess
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_Follow_Mode
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Interface
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Mode
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HomeStraight_Mode
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_AbnormalHandler
</UL>

<P><STRONG><a name="[1c2]"></a>Bumper_ResetErrorCnt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, movement.o(i.Bumper_ResetErrorCnt))
<BR><BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserInterFace_BeginToWork
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_Follow_Mode
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Interface
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_WorkConfigure
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_HomeConfigure
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_SpotConfigure
</UL>

<P><STRONG><a name="[5]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f30x_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a7]"></a>CM_AbnormalHandler</STRONG> (Thumb, 1664 bytes, Stack size 72 bytes, cormove.o(i.CM_AbnormalHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = CM_AbnormalHandler &rArr; ActList_Switch &rArr; Action_Head2Cource &rArr; CM_HeadToTarget &rArr; CM_HeadToCourse &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_GetRightStep
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cliff_GetDetectiontProcess_Result
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_WaitForMoveEnded
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActList_Clear
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActList_Add
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bumper_GetTrigStatus
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_GetCode
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_Stop
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_GetRightSpeed
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_GetLeftStep
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_GetLeftSpeed
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vacuum_ResetFailFlag
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_WorkConfigure
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_GetMode
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_SetCode
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_SetMove
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_GetMove
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActList_Switch
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_ResetSlowCnt
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_GetRightTargetStep
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_GetRightCurrent
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_GetLeftTargetStep
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_GetLeftCurrent
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WHEEL_DISABLE
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vacuum_TurnOff
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vacuum_GetCurrent
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Side_Brush_GetCurrent
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_SetPower
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_SetCheckState
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Brush_GetCurrent
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cliff_SetDetectState
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Brush_Side_SetPWM
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Brush_Main_SetPWM
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_Follow_Mode
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
</UL>

<P><STRONG><a name="[bf]"></a>CM_CellOffset</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, cormove.o(i.CM_CellOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = CM_CellOffset &rArr; Map_GetRelativeY &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRelativeY
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRelativeX
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_UpdateSpotWallBlock
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_UpdateMapWallBlock
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_CheckMeetBoundary
</UL>

<P><STRONG><a name="[c2]"></a>CM_CheckMeetBoundary</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, cormove.o(i.CM_CheckMeetBoundary))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = CM_CheckMeetBoundary &rArr; CM_CellOffset &rArr; Map_GetRelativeY &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_GetAngle
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_CellOffset
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetCell
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
</UL>

<P><STRONG><a name="[c5]"></a>CM_Drying</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cormove.o(i.CM_Drying))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = CM_Drying &rArr; CM_Move_Turn &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetTargetSpeed
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_Move_Turn
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MapTouring
</UL>

<P><STRONG><a name="[ee]"></a>CM_GetBackToStartPointFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cormove.o(i.CM_GetBackToStartPointFlag))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MapTouring
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
</UL>

<P><STRONG><a name="[da]"></a>CM_GetCMType</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cormove.o(i.CM_GetCMType))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MapTouring
</UL>

<P><STRONG><a name="[86]"></a>CM_GetCurrentTargetCnt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cormove.o(i.CM_GetCurrentTargetCnt))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Head2Cource
</UL>

<P><STRONG><a name="[29c]"></a>CM_GetMobilityIgnoreFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cormove.o(i.CM_GetMobilityIgnoreFlag))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_Follow_Mode
</UL>

<P><STRONG><a name="[c7]"></a>CM_HeadToCourse</STRONG> (Thumb, 550 bytes, Stack size 72 bytes, cormove.o(i.CM_HeadToCourse))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = CM_HeadToCourse &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetTargetSpeed
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_ResetStep
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_GetAngle
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetDir
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_GetZAcc
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_GetYAcc
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_GetXAcc
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Direction_SetLastDir
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heading_SetTargetAngle
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetRightTargetStep
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetLeftTargetStep
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_GyroFunction
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_HeadToTarget
</UL>

<P><STRONG><a name="[87]"></a>CM_HeadToTarget</STRONG> (Thumb, 222 bytes, Stack size 56 bytes, cormove.o(i.CM_HeadToTarget))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = CM_HeadToTarget &rArr; CM_HeadToCourse &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_HeadToCourse
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRobotCellY
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRobotCellX
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_CountToCell
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_Course2Dest
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Head2Cource
</UL>

<P><STRONG><a name="[d0]"></a>CM_IsBackCrossing</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, cormove.o(i.CM_IsBackCrossing))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = CM_IsBackCrossing &rArr; Map_GetRobotCountY &rArr; __hardfp_round &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRobotCountY
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
</UL>

<P><STRONG><a name="[d2]"></a>CM_IsCrossLane</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, cormove.o(i.CM_IsCrossLane))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CM_IsCrossLane
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_GetAngle
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_GetRobotHeading4
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
</UL>

<P><STRONG><a name="[d4]"></a>CM_MapTouring</STRONG> (Thumb, 1812 bytes, Stack size 80 bytes, cormove.o(i.CM_MapTouring))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = CM_MapTouring &rArr; CM_WallToMap &rArr; CM_WallFollowByCnt &rArr; CM_AbnormalHandler &rArr; ActList_Switch &rArr; Action_Head2Cource &rArr; CM_HeadToTarget &rArr; CM_HeadToCourse &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcon_ResetStatus
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_GetRightAdcValue
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRobotCell
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetTargetSpeed
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetList_Clear
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathPoint_ClearAllPoints
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathList_Clear
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBS_ResetTrigValue
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_WorkConfigure
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_SetMode
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_GetMode
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_Diff_int
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_Initialize
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM42688_Config
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_Cmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_SetCode
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToMap
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_SetHomeCellEmpty
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_Next_V2
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_GetShortWallDir
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_GetNormalWallDir
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_BlockAllTargetPoints
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathList_ReadPath
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathList_GetCnt
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathLine_GetAcreage
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_SetRobotCell
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_SetHomeCell
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRobotCellX
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetHomeCell
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetCellAcreage
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetBoundaryWest
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_FillGap
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_AdjustBoundary
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_SetFlag
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WaitForGyroCal
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_UpdateStrBlock
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_SetWallTrapFlag
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_SetTrapWallDir
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_SetBackToStartPointFlag
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_SetBackBlock
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_Move_Turn
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_Move_Back
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_GetCMType
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_GetBackToStartPointFlag
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_Drying
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_Calibration_Cmd
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_AdjustBaseline
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_RobotCloseToTargetCell
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathList_Out
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetCell
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gryo_GetUpdateFlag
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallToMap
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_ResetWallOutTrapCnt
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_MainTask
</UL>

<P><STRONG><a name="[ff]"></a>CM_MoveToMap</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, cormove.o(i.CM_MoveToMap))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = CM_MoveToMap &rArr; CM_MoveToPosition &rArr; CM_AbnormalHandler &rArr; ActList_Switch &rArr; Action_Head2Cource &rArr; CM_HeadToTarget &rArr; CM_HeadToCourse &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_CellToPoint
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_Mode
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MapTouring
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_GyroFunction
</UL>

<P><STRONG><a name="[103]"></a>CM_MoveToPosition</STRONG> (Thumb, 3168 bytes, Stack size 160 bytes, cormove.o(i.CM_MoveToPosition))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = CM_MoveToPosition &rArr; CM_AbnormalHandler &rArr; ActList_Switch &rArr; Action_Head2Cource &rArr; CM_HeadToTarget &rArr; CM_HeadToCourse &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_GetRightStep
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_GetStatus
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cliff_GetDetectiontProcess_Result
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_WaitForMoveEnded
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActList_Clear
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActList_Add
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcon_ResetStatus
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcon_ResetRemoteCode
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_ResetStatus
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bumper_GetTrigStatus
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcon_RemoteKey
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRobotCell
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_GetCode
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetTargetSpeed
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_GetRightSpeed
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_GetLeftStep
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_GetLeftSpeed
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speaker
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathList_Clear
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_SetMode
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_GetMode
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_Diff_int
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heading_GetTargetAngle
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_GetAngle
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_SetCode
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Stop
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_SetMove
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_GetMove
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActList_Switch
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_GetRightTargetStep
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_GetLeftTargetStep
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_Forward_PidProcess
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnSlip_SetCheckState
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnSlip_ResetSlipCnt
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnSlip_IsSlip
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speed_Stop
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_SetHomeCellEmpty
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_RobotCloseToTargetCount
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_IsOnPosition
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_IsCell_ReachBlocked
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_GetRobotHeading8
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_BlockAllTargetPoints
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathList_GetNextPathListPoint
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathList_GetCnt
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBS_SpotStatus
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_TwoPoint_Angle
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_TwoCell_Equal
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_TwoCell_Dis
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_IsTwoCell_Orthogonal
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_SetTarget_Cleaned
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_ReachBoundary
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_PointToCell
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRobotCountY
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRobotCountX
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRobotCellY
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRobotCellX
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_CountToCell
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Meet_Station
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_MoveToPoint
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActList_DecelerateToStop
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_UpdateMapObs
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_StoreCurrentTargetCnt
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_SetNearTargetFlag
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_SetBackToStartPointFlag
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_HeadToTarget
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_GetBackToStartPointFlag
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActList_Add_HeadingToTarget
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_GetRightTargetSpeed
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_GetLeftTargetSpeed
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_SetDynamicState
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBS_IsNear
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBS_GetTrigStatus
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_AbnormalHandler
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActList_BackToStop
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_Abs_int
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRobotCount
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_UpdateMapBumper
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToMap
</UL>

<P><STRONG><a name="[d8]"></a>CM_Move_Back</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, cormove.o(i.CM_Move_Back))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = CM_Move_Back &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetTargetStep
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetTargetSpeed
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_ResetStep
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_GetMode
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_SetMove
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetDir
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_RightStepReached
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_LeftStepReached
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_GetRightTargetStep
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_GetLeftTargetStep
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_GetDir
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MapTouring
</UL>

<P><STRONG><a name="[c6]"></a>CM_Move_Turn</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, cormove.o(i.CM_Move_Turn))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = CM_Move_Turn &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetTargetSpeed
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_GetMode
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_Diff_int
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heading_GetTargetAngle
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_GetAngle
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_GetVoltage
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_SetMove
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetDir
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heading_SetTargetAngle
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MapTouring
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_Drying
</UL>

<P><STRONG><a name="[de]"></a>CM_ResetWallOutTrapCnt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cormove.o(i.CM_ResetWallOutTrapCnt))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_Mode
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MapTouring
</UL>

<P><STRONG><a name="[e7]"></a>CM_SetBackBlock</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, cormove.o(i.CM_SetBackBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = CM_SetBackBlock &rArr; MY_SetBlockedByOffset &rArr; Map_GetRelativeByCell &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_SetBlockedByOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MapTouring
</UL>

<P><STRONG><a name="[e0]"></a>CM_SetBackToStartPointFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cormove.o(i.CM_SetBackToStartPointFlag))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MapTouring
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
</UL>

<P><STRONG><a name="[127]"></a>CM_SetBlockedByOffset</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, cormove.o(i.CM_SetBlockedByOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = CM_SetBlockedByOffset &rArr; Map_GetRelativeByCell &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRobotCell
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_GetAngle
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRelativeByCell
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_SetCell
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_UpdateMapObs
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_UpdateMapBumper
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_NormalClean
</UL>

<P><STRONG><a name="[24b]"></a>CM_SetCMType</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cormove.o(i.CM_SetCMType))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_MainTask
</UL>

<P><STRONG><a name="[105]"></a>CM_SetNearTargetFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cormove.o(i.CM_SetNearTargetFlag))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
</UL>

<P><STRONG><a name="[f7]"></a>CM_SetTrapWallDir</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, cormove.o(i.CM_SetTrapWallDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CM_SetTrapWallDir
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_GetAngle
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_GetRobotHeading4
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MapTouring
</UL>

<P><STRONG><a name="[f8]"></a>CM_SetWallTrapFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cormove.o(i.CM_SetWallTrapFlag))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MapTouring
</UL>

<P><STRONG><a name="[6f]"></a>CM_StoreCurrentTargetCnt</STRONG> (Thumb, 14 bytes, Stack size 12 bytes, cormove.o(i.CM_StoreCurrentTargetCnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CM_StoreCurrentTargetCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActList_Add_HeadingToTarget
</UL>

<P><STRONG><a name="[11b]"></a>CM_UpdateMapBumper</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, cormove.o(i.CM_UpdateMapBumper))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = CM_UpdateMapBumper &rArr; CM_SetBlockedByOffset &rArr; Map_GetRelativeByCell &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_SetBlockedByOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_Mode
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
</UL>

<P><STRONG><a name="[116]"></a>CM_UpdateMapObs</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, cormove.o(i.CM_UpdateMapObs))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = CM_UpdateMapObs &rArr; CM_SetBlockedByOffset &rArr; Map_GetRelativeByCell &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_SetBlockedByOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
</UL>

<P><STRONG><a name="[12a]"></a>CM_UpdateMapWallBlock</STRONG> (Thumb, 302 bytes, Stack size 32 bytes, cormove.o(i.CM_UpdateMapWallBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = CM_UpdateMapWallBlock &rArr; CM_CellOffset &rArr; Map_GetRelativeY &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_GetAngle
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_SetBlockIfUnclean
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_CellOffset
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_SetCell
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
</UL>

<P><STRONG><a name="[12c]"></a>CM_UpdatePosition</STRONG> (Thumb, 442 bytes, Stack size 88 bytes, cormove.o(i.CM_UpdatePosition))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = CM_UpdatePosition &rArr; Map_GetRelativeXY &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_GetRightCount
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_GetLeftCount
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ACFlag
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_GetAngle
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetCount
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_MoveRobotCountTo
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRelativeXY
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetMapArray
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_RealMap_AddPoint
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_GetRobotHeading4
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_Deg2Rad
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_SetCell
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mPC_NavDebug
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SensorsTask
</UL>

<P><STRONG><a name="[138]"></a>CM_UpdateSpotWallBlock</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, cormove.o(i.CM_UpdateSpotWallBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = CM_UpdateSpotWallBlock &rArr; CM_CellOffset &rArr; Map_GetRelativeY &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_GetAngle
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_CellOffset
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_SetCell
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
</UL>

<P><STRONG><a name="[101]"></a>CM_UpdateStrBlock</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, cormove.o(i.CM_UpdateStrBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = CM_UpdateStrBlock &rArr; MY_SetBlockedByOffset &rArr; Map_GetRelativeByCell &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_SetBlockedByOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MapTouring
</UL>

<P><STRONG><a name="[fe]"></a>CM_WaitForGyroCal</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cormove.o(i.CM_WaitForGyroCal))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MapTouring
</UL>

<P><STRONG><a name="[148]"></a>CM_WallFollowBoundaryEvent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cormove.o(i.CM_WallFollowBoundaryEvent))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
</UL>

<P><STRONG><a name="[139]"></a>CM_WallFollowByCnt</STRONG> (Thumb, 7984 bytes, Stack size 208 bytes, cormove.o(i.CM_WallFollowByCnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = CM_WallFollowByCnt &rArr; CM_AbnormalHandler &rArr; ActList_Switch &rArr; Action_Head2Cource &rArr; CM_HeadToTarget &rArr; CM_HeadToCourse &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_GetRightStep
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_GetStatus
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cliff_GetDetectiontProcess_Result
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_WaitForMoveEnded
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActList_Clear
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActList_Add
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcon_ResetStatus
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcon_ResetRemoteCode
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_ResetStatus
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bumper_GetTrigStatus
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcon_RemoteKey
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRobotCell
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_GetCode
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetTargetSpeed
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_GetRightSpeed
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_GetLeftStep
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_GetLeftSpeed
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathList_Clear
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_SetMode
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_GetMode
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_Diff_int
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heading_GetTargetAngle
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_GetAngle
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_SetCode
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_SetMove
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_GetMove
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActList_Switch
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_GetRightTargetStep
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_GetLeftTargetStep
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_GetLeftAverageAdcValue
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnSlip_ResetSlipCnt
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnSlip_IsSlip
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stuck_IsStucked
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_SetHomeCellEmpty
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_RobotLeaveToTargetCell
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_OverLane
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_GetRobotHeading8
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_GetRobotDirection
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_BlockAllTargetPoints
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBS_R_F_Near
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBS_IsWallNear
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_LimitingValue
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_WallTrackUpdate
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_WallTrackShowAll
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_WallTrackSetObs
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_WallTrackClear
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_TwoCellMatch
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_SetBlockIfUnclean
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_ReachBoundary
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_PointToCell
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRobotCountY
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRobotCellY
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRobotCellX
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Right_Meet_Station
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Meet_Station
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Left_Meet_Station
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActList_WallStraightAndForward
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActList_WallOffEdgeStop
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActList_DecelerateToStop
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowBoundaryEvent
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_UpdateSpotWallBlock
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_UpdateMapWallBlock
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_UpdateMapObs
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_SetBackToStartPointFlag
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_IsCrossLane
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_IsBackCrossing
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_GetBackToStartPointFlag
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_CheckMeetBoundary
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActList_GetCnt
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_SetDynamicState
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_GetRightAverageAdcValue
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBS_L_F_Near
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBS_GetTrigStatus
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_RoundAngle
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_AbnormalHandler
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActList_BackToStop
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_RobotCloseToTargetCell
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_GetRobotHeading4
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_Abs_int
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_SetCell
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRobotCount
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_UpdateMapBumper
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_SetSpiralDir
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_OverLane
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_GetSpiralDir
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_GetPointLaneIdx
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetSpeed
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetRightTargetSpeed
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetLeftTargetSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallToMap
</UL>

<P><STRONG><a name="[f9]"></a>CM_WallToMap</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, cormove.o(i.CM_WallToMap))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = CM_WallToMap &rArr; CM_WallFollowByCnt &rArr; CM_AbnormalHandler &rArr; ActList_Switch &rArr; Action_Head2Cource &rArr; CM_HeadToTarget &rArr; CM_HeadToCourse &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_CellToPoint
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_Mode
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MapTouring
</UL>

<P><STRONG><a name="[157]"></a>Charge_Configuration</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, sysinitialize.o(i.Charge_Configuration))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charge_Process
</UL>

<P><STRONG><a name="[156]"></a>Charge_Process</STRONG> (Thumb, 800 bytes, Stack size 16 bytes, charge.o(i.Charge_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Charge_Process &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_Configuration
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_GetCurrentBaselineAdc
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_SetBattery
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charge_Configuration
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Charge_Current
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_SetQuitCheckState
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_ResetCurrentTime
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speaker
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_GetVoltage
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ControlTask
</UL>

<P><STRONG><a name="[23d]"></a>Charge_SetSwitch</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, charge.o(i.Charge_SetSwitch))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ControlTask
</UL>

<P><STRONG><a name="[188]"></a>Chat2Float</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gyro.o(i.Chat2Float))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Chat2Float
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_ParseMsg
</UL>

<P><STRONG><a name="[26c]"></a>Cliff_DetectionProcess</STRONG> (Thumb, 220 bytes, Stack size 0 bytes, obscliff.o(i.Cliff_DetectionProcess))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SensorsTask
</UL>

<P><STRONG><a name="[26b]"></a>Cliff_GetDetectState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, obscliff.o(i.Cliff_GetDetectState))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SensorsTask
</UL>

<P><STRONG><a name="[b2]"></a>Cliff_GetDetectiontProcess_Result</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, obscliff.o(i.Cliff_GetDetectiontProcess_Result))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_Follow_Mode
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Mode
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HomeStraight_Mode
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_AbnormalHandler
</UL>

<P><STRONG><a name="[276]"></a>Cliff_GetInstantStatus</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, obscliff.o(i.Cliff_GetInstantStatus))
<BR><BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserInterFace_IsRobotPickedUp
</UL>

<P><STRONG><a name="[ad]"></a>Cliff_SetDetectState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, obscliff.o(i.Cliff_SetDetectState))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_WorkConfigure
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_DisableAll
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_HomeConfigure
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_AbnormalHandler
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_SpotConfigure
</UL>

<P><STRONG><a name="[15d]"></a>DAC_Configuration</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, sysinitialize.o(i.DAC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DAC_Configuration &rArr; dac_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_wave_mode_config
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_trigger_disable
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_output_buffer_enable
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_enable
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInitialize
</UL>

<P><STRONG><a name="[19]"></a>DMA0_Channel3_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gd32f30x_it.o(i.DMA0_Channel3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DMA0_Channel3_IRQHandler &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA0_Channel6_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f30x_it.o(i.DMA0_Channel6_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f30x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[164]"></a>Debug_DMA_Write_String</STRONG> (Thumb, 16 bytes, Stack size 12 bytes, usart.o(i.Debug_DMA_Write_String))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Debug_DMA_Write_String
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_DMA_String
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_PrintTask
</UL>

<P><STRONG><a name="[166]"></a>Debug_Write_Byte</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, usart.o(i.Debug_Write_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Debug_Write_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTMY_Transmit_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
</UL>

<P><STRONG><a name="[169]"></a>Direction_GetLastDir</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, movement.o(i.Direction_GetLastDir))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Direction_IsLastDirRight
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Direction_IsLastDirLeft
</UL>

<P><STRONG><a name="[168]"></a>Direction_IsLastDirLeft</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, movement.o(i.Direction_IsLastDirLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Direction_IsLastDirLeft
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Direction_GetLastDir
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HomeStraight_Mode
</UL>

<P><STRONG><a name="[16a]"></a>Direction_IsLastDirRight</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, movement.o(i.Direction_IsLastDirRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Direction_IsLastDirRight
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Direction_GetLastDir
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HomeStraight_Mode
</UL>

<P><STRONG><a name="[95]"></a>Direction_SetLastDir</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, movement.o(i.Direction_SetLastDir))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_HeadToCourse
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Turn
</UL>

<P><STRONG><a name="[16b]"></a>Display_Breath</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, display.o(i.Display_Breath))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Display_Breath &rArr; Set_LED_Table
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_GetMode
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LED_Table
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Process
</UL>

<P><STRONG><a name="[16d]"></a>Display_Process</STRONG> (Thumb, 430 bytes, Stack size 32 bytes, display.o(i.Display_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Display_Process &rArr; Display_Breath &rArr; Set_LED_Table
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Bat_Red
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Bat_Green
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_GetCode
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LED_On_Switch
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LED_On_Blink
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LED
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Breath
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ControlTask
</UL>

<P><STRONG><a name="[158]"></a>Display_SetBattery</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, display.o(i.Display_SetBattery))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Display_SetBattery
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LED5_On_Switch
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LED4_On_Switch
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ControlTask
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charge_Process
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Interface
</UL>

<P><STRONG><a name="[11]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gd32f30x_it.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_flag_get
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_flag_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>EXTI10_15_IRQHandler</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, gd32f30x_it.o(i.EXTI10_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI10_15_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_flag_get
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_flag_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gd32f30x_it.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_flag_get
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_flag_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, gd32f30x_it.o(i.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_flag_get
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_flag_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gd32f30x_it.o(i.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EXTI3_IRQHandler &rArr; Rcon_FL
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_flag_get
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_flag_clear
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcon_FL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gd32f30x_it.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EXTI4_IRQHandler &rArr; Rcon_L
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_flag_get
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_flag_clear
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcon_L
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI5_9_IRQHandler</STRONG> (Thumb, 222 bytes, Stack size 8 bytes, gd32f30x_it.o(i.EXTI5_9_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EXTI5_9_IRQHandler &rArr; Rcon_R
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_flag_get
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_flag_clear
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcon_R
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcon_FR
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcon_BR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22b]"></a>EXTI_Configuration</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, sysinitialize.o(i.EXTI_Configuration))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInitialize
</UL>

<P><STRONG><a name="[bd]"></a>Error_GetCode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, movement.o(i.Error_GetCode))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Process
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ControlTask
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_Follow_Mode
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Interface
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standby_Mode
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Mode
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_AbnormalHandler
</UL>

<P><STRONG><a name="[17c]"></a>Error_ResetCode</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, movement.o(i.Error_ResetCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Error_ResetCode
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_SetCode
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ControlTask
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Interface
</UL>

<P><STRONG><a name="[b5]"></a>Error_SetCode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, movement.o(i.Error_SetCode))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_ResetCode
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ControlTask
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_Follow_Mode
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Interface
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Mode
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MapTouring
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_MainTask
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_AbnormalHandler
</UL>

<P><STRONG><a name="[2c6]"></a>Flash_Erase</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wifiota.o(i.Flash_Erase))
<BR><BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
</UL>

<P><STRONG><a name="[221]"></a>GPIO_Configuration</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, sysinitialize.o(i.GPIO_Configuration))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInitialize
</UL>

<P><STRONG><a name="[17d]"></a>GetBaseLineADCV</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sysinitialize.o(i.GetBaseLineADCV))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetBaseLineADCV
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[136]"></a>Get_ACFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sysinitialize.o(i.Get_ACFlag))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_UpdatePosition
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ControlTask
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_SetCell
</UL>

<P><STRONG><a name="[170]"></a>Get_Bat_Green</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, display.o(i.Get_Bat_Green))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Process
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Interface
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standby_Mode
</UL>

<P><STRONG><a name="[16f]"></a>Get_Bat_Red</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, display.o(i.Get_Bat_Red))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Process
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Interface
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standby_Mode
</UL>

<P><STRONG><a name="[15b]"></a>Get_Charge_Current</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, charge.o(i.Get_Charge_Current))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Get_Charge_Current &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charge_Process
</UL>

<P><STRONG><a name="[17f]"></a>Get_Upgrade_Flag</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, wifiota.o(i.Get_Upgrade_Flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Get_Upgrade_Flag &rArr; W25QXX_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[27c]"></a>Get_VacMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bldc.o(i.Get_VacMode))
<BR><BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vacuum_TuneProcess
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_All_Data_Init
</UL>

<P><STRONG><a name="[240]"></a>Get_Wifi_Enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wifiota.o(i.Get_Wifi_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ControlTask
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[e8]"></a>Gryo_GetUpdateFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gyro.o(i.Gryo_GetUpdateFlag))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_Follow_Mode
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_Mode
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MapTouring
</UL>

<P><STRONG><a name="[eb]"></a>Gyro_Calibration_Cmd</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, gyro.o(i.Gyro_Calibration_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Gyro_Calibration_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Gyro_Calibration
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_DMA_Write_String
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_Follow_Mode
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MapTouring
</UL>

<P><STRONG><a name="[183]"></a>Gyro_Calibration_EnableCmd</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gyro.o(i.Gyro_Calibration_EnableCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Gyro_Calibration_EnableCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_DMA_Write_String
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_Reset_Cmd
</UL>

<P><STRONG><a name="[d6]"></a>Gyro_Cmd</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, gyro.o(i.Gyro_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Gyro_Cmd &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_GetMode
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_Reset_Cmd
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_Reset
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_On_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_Follow_Mode
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_Mode
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MapTouring
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_GyroFunction
</UL>

<P><STRONG><a name="[182]"></a>Gyro_DMA_Write_String</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usart.o(i.Gyro_DMA_Write_String))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_Calibration_Cmd
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_Reset_Cmd
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_On_Cmd
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_Calibration_EnableCmd
</UL>

<P><STRONG><a name="[c3]"></a>Gyro_GetAngle</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gyro.o(i.Gyro_GetAngle))
<BR><BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnSlip_DetectProcess
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_UpdatePosition
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SensorsTask
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_Follow_Mode
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_HeadToCourse
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_GyroFunction
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_GetShortWallDir
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_GetRobotHeading8
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_GetRobotDirection
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_GetNormalWallDir
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_TwoPoint_Angle
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_SetBlockedByOffset
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_UpdateSpotWallBlock
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_UpdateMapWallBlock
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_SetTrapWallDir
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_SetBlockedByOffset
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_Move_Turn
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_IsCrossLane
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_CheckMeetBoundary
</UL>

<P><STRONG><a name="[ca]"></a>Gyro_GetXAcc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gyro.o(i.Gyro_GetXAcc))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_HeadToCourse
</UL>

<P><STRONG><a name="[c9]"></a>Gyro_GetYAcc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gyro.o(i.Gyro_GetYAcc))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_HeadToCourse
</UL>

<P><STRONG><a name="[c8]"></a>Gyro_GetZAcc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gyro.o(i.Gyro_GetZAcc))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_HeadToCourse
</UL>

<P><STRONG><a name="[184]"></a>Gyro_On_Cmd</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gyro.o(i.Gyro_On_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Gyro_On_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_DMA_Write_String
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_Cmd
</UL>

<P><STRONG><a name="[187]"></a>Gyro_ParseMsg</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, gyro.o(i.Gyro_ParseMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Gyro_ParseMsg &rArr; Chat2Float
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chat2Float
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_ReceiveCharacter
</UL>

<P><STRONG><a name="[189]"></a>Gyro_ReceiveCharacter</STRONG> (Thumb, 288 bytes, Stack size 8 bytes, gyro.o(i.Gyro_ReceiveCharacter))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Gyro_ReceiveCharacter &rArr; Gyro_ParseMsg &rArr; Chat2Float
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_ParseMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[185]"></a>Gyro_Reset</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, gyro.o(i.Gyro_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_Cmd
</UL>

<P><STRONG><a name="[186]"></a>Gyro_Reset_Cmd</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gyro.o(i.Gyro_Reset_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Gyro_Reset_Cmd &rArr; Gyro_Calibration_EnableCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_Calibration_EnableCmd
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_DMA_Write_String
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_Cmd
</UL>

<P><STRONG><a name="[3]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f30x_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[106]"></a>Heading_GetTargetAngle</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cormove.o(i.Heading_GetTargetAngle))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_GyroFunction
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_Move_Turn
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
</UL>

<P><STRONG><a name="[cb]"></a>Heading_SetTargetAngle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cormove.o(i.Heading_SetTargetAngle))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_HeadToCourse
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_Move_Turn
</UL>

<P><STRONG><a name="[18a]"></a>HomeStraight_Mode</STRONG> (Thumb, 4614 bytes, Stack size 96 bytes, homestraight.o(i.HomeStraight_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = HomeStraight_Mode &rArr; ActList_Switch &rArr; Action_Head2Cource &rArr; CM_HeadToTarget &rArr; CM_HeadToCourse &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetTargetStep
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_GetRightStep
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_GetStatus
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cliff_GetDetectiontProcess_Result
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_WaitForMoveEnded
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActList_Clear
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActList_Add
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcon_ResetStatus
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcon_ResetRemoteCode
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcon_GetRemoteCode
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bumper_GetTrigStatus
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcon_RemoteKey
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_Stop
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetTargetSpeed
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_GetRightSpeed
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_GetLeftStep
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_GetLeftSpeed
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBS_ResetTrigValue
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_SetMode
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_GetMode
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_SetMove
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_GetMove
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActList_Switch
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_ResetMoveStep
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_GetRightTargetSpeed
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_GetLeftTargetSpeed
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_GetLeftMoveStep
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_GetRandomValue
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcon_IsGotStationSignal
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcon_GetStatus
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_HomeConfigure
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Direction_IsLastDirRight
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Direction_IsLastDirLeft
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActList_GetCnt
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adjust_Home_Path
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBS_IsNear
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBS_GetTrigStatus
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_MoveForward
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_MainTask
</UL>

<P><STRONG><a name="[d5]"></a>ICM42688_Config</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gyro.o(i.ICM42688_Config))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_Follow_Mode
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_Mode
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MapTouring
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_GyroFunction
</UL>

<P><STRONG><a name="[181]"></a>Is_Gyro_Calibration</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gyro.o(i.Is_Gyro_Calibration))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_Calibration_Cmd
</UL>

<P><STRONG><a name="[142]"></a>Is_Left_Meet_Station</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, rcon.o(i.Is_Left_Meet_Station))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Is_Left_Meet_Station
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcon_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
</UL>

<P><STRONG><a name="[115]"></a>Is_Meet_Station</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, rcon.o(i.Is_Meet_Station))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Is_Meet_Station
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcon_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
</UL>

<P><STRONG><a name="[143]"></a>Is_Right_Meet_Station</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, rcon.o(i.Is_Right_Meet_Station))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Is_Right_Meet_Station
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcon_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
</UL>

<P><STRONG><a name="[192]"></a>Key_GetPressKey</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, touchpad.o(i.Key_GetPressKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Key_GetPressKey &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SensorsTask
</UL>

<P><STRONG><a name="[193]"></a>Key_GetStatus</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, touchpad.o(i.Key_GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_GetPressKey
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SensorsTask
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Interface
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standby_Mode
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[194]"></a>LED_Display</STRONG> (Thumb, 1282 bytes, Stack size 8 bytes, display.o(i.LED_Display))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LED_Display &rArr; Mode_GetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_GetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER5_IRQHandler
</UL>

<P><STRONG><a name="[2a0]"></a>LW_DIR_BACKWARD</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wheel.o(i.LW_DIR_BACKWARD))
<BR><BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetLeftDir
</UL>

<P><STRONG><a name="[29f]"></a>LW_DIR_FORWARD</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wheel.o(i.LW_DIR_FORWARD))
<BR><BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetLeftDir
</UL>

<P><STRONG><a name="[195]"></a>LineList_GetNextLowPriorityPoint</STRONG> (Thumb, 1116 bytes, Stack size 72 bytes, shortestpath.o(i.LineList_GetNextLowPriorityPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = LineList_GetNextLowPriorityPoint &rArr; Path_GetCellHeading8 &rArr; Math_Course2Dest &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_Diff_int
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_GetMax
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_GetMin
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GridToCell
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_NavDebug
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_GetCellHeading8
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShortestPath_CreatePathPoint
</UL>

<P><STRONG><a name="[126]"></a>MY_SetBlockedByOffset</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, cormove.o(i.MY_SetBlockedByOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = MY_SetBlockedByOffset &rArr; Map_GetRelativeByCell &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_GetAngle
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRelativeByCell
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_SetCell
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_UpdateStrBlock
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_SetBackBlock
</UL>

<P><STRONG><a name="[b9]"></a>Main_Brush_GetCurrent</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, brush.o(i.Main_Brush_GetCurrent))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_AbnormalHandler
</UL>

<P><STRONG><a name="[254]"></a>Main_Brush_GetCurrentAdc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, brush.o(i.Main_Brush_GetCurrentAdc))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SensorsTask
</UL>

<P><STRONG><a name="[25e]"></a>Main_Brush_SetCurrent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, brush.o(i.Main_Brush_SetCurrent))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SensorsTask
</UL>

<P><STRONG><a name="[ed]"></a>Map_AdjustBoundary</STRONG> (Thumb, 372 bytes, Stack size 16 bytes, map.o(i.Map_AdjustBoundary))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = Map_AdjustBoundary &rArr; Map_SetYBoundary &rArr; Map_SetCell &rArr; AC_RealMap_AddPoint &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_StoreMapEdge
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_SetYBoundary
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_SetXBoundary
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_LoadMapEdge
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_CellToCount
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MapTouring
</UL>

<P><STRONG><a name="[1b2]"></a>Map_Adjust_Mapsize</STRONG> (Thumb, 174 bytes, Stack size 0 bytes, map.o(i.Map_Adjust_Mapsize))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_SetCell
</UL>

<P><STRONG><a name="[1a0]"></a>Map_BrushBlockUnclean</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, map.o(i.Map_BrushBlockUnclean))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Map_BrushBlockUnclean &rArr; Map_GetCell &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetCell
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_IsLaneCleaned
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_NormalClean
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_LaneCleaned
</UL>

<P><STRONG><a name="[19b]"></a>Map_CellToCount</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, map.o(i.Map_CellToCount))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_SetRobotCell
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRelativeByCell
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_CellToPoint
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_AdjustBoundary
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_SetBoundary
</UL>

<P><STRONG><a name="[1a7]"></a>Map_CellToMap</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, map.o(i.Map_CellToMap))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_SetCell
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetCell
</UL>

<P><STRONG><a name="[102]"></a>Map_CellToPoint</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, map.o(i.Map_CellToPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Map_CellToPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_CellToCount
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToMap
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathList_GetNextPathListPoint
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallToMap
</UL>

<P><STRONG><a name="[1a1]"></a>Map_Cell_Blocked</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, map.o(i.Map_Cell_Blocked))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Map_Cell_Blocked &rArr; Map_GetCell &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetCell
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_IsBlock_Access
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetList_Rearrange
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_LaneCleaned
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_IsBlock_Access2
</UL>

<P><STRONG><a name="[cc]"></a>Map_CountToCell</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, map.o(i.Map_CountToCell))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Map_CountToCell &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_PointToCell
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRobotCellY
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRobotCellX
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRelativeY
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRelativeXY
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRelativeX
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRelativeByCell
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_HeadToTarget
</UL>

<P><STRONG><a name="[f6]"></a>Map_FillGap</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, map.o(i.Map_FillGap))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Map_FillGap &rArr; Map_SetCell &rArr; AC_RealMap_AddPoint &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_GetMode
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_SetCell
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetYMin
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetYMax
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetXMin
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetXMax
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetCell
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MapTouring
</UL>

<P><STRONG><a name="[db]"></a>Map_GetBoundaryWest</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, map.o(i.Map_GetBoundaryWest))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MapTouring
</UL>

<P><STRONG><a name="[c4]"></a>Map_GetCell</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, map.o(i.Map_GetCell))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Map_GetCell &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetMapArray
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_CellToMap
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MapTouring
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_GetShortWallDir
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_BlockAllTargetPoints
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_WallTrackSetObs
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_SetTarget_Cleaned
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_SetBlockIfUnclean
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetCellAcreage
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_FillGap
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_CheckMeetBoundary
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_IsRobotAccessible
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_BrushBlockUnclean
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_ClearCleanCells
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_Cell_Blocked
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetList_IsBlockTargetable
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetList_CreateList
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_CheckRoundable
</UL>

<P><STRONG><a name="[f4]"></a>Map_GetCellAcreage</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, map.o(i.Map_GetCellAcreage))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = Map_GetCellAcreage &rArr; Map_GetCell &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetYMin
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetYMax
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetXMin
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetXMax
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetCell
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MapTouring
</UL>

<P><STRONG><a name="[e6]"></a>Map_GetHomeCell</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, map.o(i.Map_GetHomeCell))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Map_GetHomeCell
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MapTouring
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_SetHomeCellEmpty
</UL>

<P><STRONG><a name="[135]"></a>Map_GetMapArray</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, map.o(i.Map_GetMapArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Map_GetMapArray
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_UpdatePosition
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_SetCell
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetCell
</UL>

<P><STRONG><a name="[128]"></a>Map_GetRelativeByCell</STRONG> (Thumb, 580 bytes, Stack size 96 bytes, map.o(i.Map_GetRelativeByCell))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = Map_GetRelativeByCell &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_CountToCell
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_Deg2Rad
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_NormalAngle
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_CellToCount
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_IsCell_ReachBlocked
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_SetBlockedByOffset
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_SetBlockedByOffset
</UL>

<P><STRONG><a name="[c0]"></a>Map_GetRelativeX</STRONG> (Thumb, 386 bytes, Stack size 72 bytes, map.o(i.Map_GetRelativeX))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = Map_GetRelativeX &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRobotCountX
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_CountToCell
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_Deg2Rad
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_CellOffset
</UL>

<P><STRONG><a name="[134]"></a>Map_GetRelativeXY</STRONG> (Thumb, 516 bytes, Stack size 96 bytes, map.o(i.Map_GetRelativeXY))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = Map_GetRelativeXY &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRobotCountY
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRobotCountX
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_CountToCell
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_UpdatePosition
</UL>

<P><STRONG><a name="[c1]"></a>Map_GetRelativeY</STRONG> (Thumb, 386 bytes, Stack size 72 bytes, map.o(i.Map_GetRelativeY))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = Map_GetRelativeY &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRobotCountY
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_CountToCell
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_Deg2Rad
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_CellOffset
</UL>

<P><STRONG><a name="[f0]"></a>Map_GetRobotCell</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, map.o(i.Map_GetRobotCell))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Map_GetRobotCell &rArr; Map_GetRobotCellY &rArr; Map_CountToCell &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRobotCellY
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRobotCellX
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_WallFineWay
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_CalculatePathTask
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_Follow_Mode
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_Mode
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MapTouring
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_RobotLeaveToTargetCell
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_Next_V2
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_SetBlockedByOffset
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_RobotCloseToTargetCell
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathList_AddNewPoint
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetList_Rearrange
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_UpdateRobotPos
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_NormalClean
</UL>

<P><STRONG><a name="[ce]"></a>Map_GetRobotCellX</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, map.o(i.Map_GetRobotCellX))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Map_GetRobotCellX &rArr; Map_CountToCell &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_CountToCell
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRobotCell
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MapTouring
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_HeadToTarget
</UL>

<P><STRONG><a name="[cd]"></a>Map_GetRobotCellY</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, map.o(i.Map_GetRobotCellY))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Map_GetRobotCellY &rArr; Map_CountToCell &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_CountToCell
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRobotCell
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_GetNormalWallDir
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_HeadToTarget
</UL>

<P><STRONG><a name="[10a]"></a>Map_GetRobotCount</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, map.o(i.Map_GetRobotCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Map_GetRobotCount &rArr; __hardfp_round &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_RobotCloseToTargetCount
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_OverLane
</UL>

<P><STRONG><a name="[11c]"></a>Map_GetRobotCountX</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, map.o(i.Map_GetRobotCountX))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Map_GetRobotCountX &rArr; __hardfp_round &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRelativeXY
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRelativeX
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
</UL>

<P><STRONG><a name="[d1]"></a>Map_GetRobotCountY</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, map.o(i.Map_GetRobotCountY))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Map_GetRobotCountY &rArr; __hardfp_round &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRelativeY
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRelativeXY
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_IsBackCrossing
</UL>

<P><STRONG><a name="[1a6]"></a>Map_GetXMax</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, map.o(i.Map_GetXMax))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetCellAcreage
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_FillGap
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_CheckRoundable
</UL>

<P><STRONG><a name="[1a3]"></a>Map_GetXMin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, map.o(i.Map_GetXMin))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetCellAcreage
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_FillGap
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_CheckRoundable
</UL>

<P><STRONG><a name="[1a5]"></a>Map_GetYMax</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, map.o(i.Map_GetYMax))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetCellAcreage
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_FillGap
</UL>

<P><STRONG><a name="[1a4]"></a>Map_GetYMin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, map.o(i.Map_GetYMin))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetCellAcreage
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_FillGap
</UL>

<P><STRONG><a name="[196]"></a>Map_GridToCell</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, map.o(i.Map_GridToCell))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Map_GridToCell
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineList_GetNextLowPriorityPoint
</UL>

<P><STRONG><a name="[d9]"></a>Map_Initialize</STRONG> (Thumb, 288 bytes, Stack size 16 bytes, map.o(i.Map_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = Map_Initialize &rArr; Map_SetBoundary &rArr; Map_SetYBoundary &rArr; Map_SetCell &rArr; AC_RealMap_AddPoint &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_GetMode
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_SetFlag
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mPC_NavDebug
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Update_MapReport_Init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Start_Stream_trans
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Open_Stream_trans
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_Reset_RealMap
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_SetBoundary
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_Follow_Mode
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_Mode
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MapTouring
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_GyroFunction
</UL>

<P><STRONG><a name="[1af]"></a>Map_IsBlock_Access</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, map.o(i.Map_IsBlock_Access))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = Map_IsBlock_Access &rArr; Map_Cell_Blocked &rArr; Map_GetCell &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_Cell_Blocked
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathLine_FindOneLine
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathLine_FindNextLines
</UL>

<P><STRONG><a name="[1b0]"></a>Map_IsBlock_Access2</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, map.o(i.Map_IsBlock_Access2))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = Map_IsBlock_Access2 &rArr; Map_Cell_Blocked &rArr; Map_GetCell &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_Cell_Blocked
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_IsCell_ReachBlocked
</UL>

<P><STRONG><a name="[1b1]"></a>Map_IsRobotAccessible</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, map.o(i.Map_IsRobotAccessible))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Map_IsRobotAccessible &rArr; Map_GetCell &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetCell
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_IsLaneCleaned
</UL>

<P><STRONG><a name="[19e]"></a>Map_LoadMapEdge</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, map.o(i.Map_LoadMapEdge))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_AdjustBoundary
</UL>

<P><STRONG><a name="[133]"></a>Map_MoveRobotCountTo</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, map.o(i.Map_MoveRobotCountTo))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Map_MoveRobotCountTo &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_UpdatePosition
</UL>

<P><STRONG><a name="[10c]"></a>Map_PointToCell</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, map.o(i.Map_PointToCell))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Map_PointToCell &rArr; Map_CountToCell &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_CountToCell
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
</UL>

<P><STRONG><a name="[117]"></a>Map_ReachBoundary</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, map.o(i.Map_ReachBoundary))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
</UL>

<P><STRONG><a name="[12b]"></a>Map_SetBlockIfUnclean</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, map.o(i.Map_SetBlockIfUnclean))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = Map_SetBlockIfUnclean &rArr; Map_SetCell &rArr; AC_RealMap_AddPoint &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_SetCell
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetCell
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_BlockAllTargetPoints
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_UpdateMapWallBlock
</UL>

<P><STRONG><a name="[1aa]"></a>Map_SetBoundary</STRONG> (Thumb, 388 bytes, Stack size 24 bytes, map.o(i.Map_SetBoundary))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = Map_SetBoundary &rArr; Map_SetYBoundary &rArr; Map_SetCell &rArr; AC_RealMap_AddPoint &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_SetYBoundary
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_SetXBoundary
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_CellToCount
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_Initialize
</UL>

<P><STRONG><a name="[129]"></a>Map_SetCell</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, map.o(i.Map_SetCell))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Map_SetCell &rArr; AC_RealMap_AddPoint &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ACFlag
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_SetMode
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_GetMode
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetMapArray
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_RealMap_AddPoint
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mPC_NavDebug
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_SetMapArray
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_CellToMap
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_Adjust_Mapsize
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_UpdatePosition
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_SetHomeCellEmpty
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_WallTrackSetObs
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_SetTarget_Cleaned
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_SetBlockIfUnclean
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_FillGap
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_SetBlockedByOffset
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_UpdateSpotWallBlock
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_UpdateMapWallBlock
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_SetBlockedByOffset
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_ClearCleanCells
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_SetYBoundary
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_SetXBoundary
</UL>

<P><STRONG><a name="[dc]"></a>Map_SetHomeCell</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, map.o(i.Map_SetHomeCell))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Map_SetHomeCell
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MapTouring
</UL>

<P><STRONG><a name="[1b3]"></a>Map_SetMapArray</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, map.o(i.Map_SetMapArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Map_SetMapArray
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_SetCell
</UL>

<P><STRONG><a name="[dd]"></a>Map_SetRobotCell</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, map.o(i.Map_SetRobotCell))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Map_SetRobotCell &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_SetRobotCount
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_CellToCount
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MapTouring
</UL>

<P><STRONG><a name="[1b4]"></a>Map_SetRobotCount</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, map.o(i.Map_SetRobotCount))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_SetRobotCell
</UL>

<P><STRONG><a name="[10f]"></a>Map_SetTarget_Cleaned</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, map.o(i.Map_SetTarget_Cleaned))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = Map_SetTarget_Cleaned &rArr; Map_SetCell &rArr; AC_RealMap_AddPoint &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_SetCell
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetCell
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
</UL>

<P><STRONG><a name="[19d]"></a>Map_SetXBoundary</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, map.o(i.Map_SetXBoundary))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Map_SetXBoundary &rArr; Map_SetCell &rArr; AC_RealMap_AddPoint &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_SetCell
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_AdjustBoundary
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_SetBoundary
</UL>

<P><STRONG><a name="[19f]"></a>Map_SetYBoundary</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, map.o(i.Map_SetYBoundary))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Map_SetYBoundary &rArr; Map_SetCell &rArr; AC_RealMap_AddPoint &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_SetCell
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_AdjustBoundary
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_SetBoundary
</UL>

<P><STRONG><a name="[19c]"></a>Map_StoreMapEdge</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, map.o(i.Map_StoreMapEdge))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_AdjustBoundary
</UL>

<P><STRONG><a name="[151]"></a>Map_TwoCellMatch</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, map.o(i.Map_TwoCellMatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Map_TwoCellMatch
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathList_AddNewPoint
</UL>

<P><STRONG><a name="[1b5]"></a>Map_WallTrackAdd</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, map.o(i.Map_WallTrackAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Map_WallTrackAdd &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_WallTrackUpdate
</UL>

<P><STRONG><a name="[13c]"></a>Map_WallTrackClear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, map.o(i.Map_WallTrackClear))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
</UL>

<P><STRONG><a name="[1b6]"></a>Map_WallTrackExited</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, map.o(i.Map_WallTrackExited))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Map_WallTrackExited
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_WallTrackUpdate
</UL>

<P><STRONG><a name="[155]"></a>Map_WallTrackSetObs</STRONG> (Thumb, 336 bytes, Stack size 40 bytes, map.o(i.Map_WallTrackSetObs))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = Map_WallTrackSetObs &rArr; Map_SetCell &rArr; AC_RealMap_AddPoint &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_SetCell
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetCell
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
</UL>

<P><STRONG><a name="[154]"></a>Map_WallTrackShowAll</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, map.o(i.Map_WallTrackShowAll))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
</UL>

<P><STRONG><a name="[14f]"></a>Map_WallTrackUpdate</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, map.o(i.Map_WallTrackUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Map_WallTrackUpdate &rArr; Map_WallTrackAdd &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_WallTrackExited
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_WallTrackAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
</UL>

<P><STRONG><a name="[107]"></a>Math_Abs_int</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mymath.o(i.Math_Abs_int))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_Forward_PidProcess
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_GetNextLanePos
</UL>

<P><STRONG><a name="[1b7]"></a>Math_Absolute</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, mymath.o(i.Math_Absolute))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Math_Absolute &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_Mode
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_PathPlanning
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_GetPointLaneIdx
</UL>

<P><STRONG><a name="[cf]"></a>Math_Course2Dest</STRONG> (Thumb, 178 bytes, Stack size 72 bytes, mymath.o(i.Math_Course2Dest))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Math_Course2Dest &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_Rad2Deg
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_TwoPoint_Angle
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_HeadToTarget
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_OverLane
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_IsLaneCleaned
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_GetCellHeading8
</UL>

<P><STRONG><a name="[130]"></a>Math_Deg2Rad</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, mymath.o(i.Math_Deg2Rad))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Math_Deg2Rad &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_UpdatePosition
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRelativeY
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRelativeX
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRelativeByCell
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_IsLaneCleaned
</UL>

<P><STRONG><a name="[fb]"></a>Math_Diff_int</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mymath.o(i.Math_Diff_int))
<BR><BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_DynamicProcess
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnSlip_DetectProcess
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBS_DynamicProcess
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MapTouring
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_GyroFunction
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_RobotLeaveToTargetCell
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_RobotCloseToTargetCount
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_OverLane
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_IsOnPosition
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_Move_Turn
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_RobotCloseToTargetCell
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_IsLaneCleaned
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShortestPath_CreatePathPoint
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathLine_SortLines
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineList_GetNextLowPriorityPoint
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetList_Rearrange
</UL>

<P><STRONG><a name="[199]"></a>Math_GetMax</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mymath.o(i.Math_GetMax))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_Mode
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_PathPlanning
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_GetPointLaneIdx
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathLine_SortLines
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineList_GetNextLowPriorityPoint
</UL>

<P><STRONG><a name="[198]"></a>Math_GetMin</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mymath.o(i.Math_GetMin))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathLine_SortLines
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineList_GetNextLowPriorityPoint
</UL>

<P><STRONG><a name="[111]"></a>Math_IsTwoCell_Orthogonal</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, mymath.o(i.Math_IsTwoCell_Orthogonal))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Math_IsTwoCell_Orthogonal
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
</UL>

<P><STRONG><a name="[14a]"></a>Math_LimitingValue</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mymath.o(i.Math_LimitingValue))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_Forward_PidProcess
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
</UL>

<P><STRONG><a name="[1a8]"></a>Math_NormalAngle</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, mymath.o(i.Math_NormalAngle))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRelativeByCell
</UL>

<P><STRONG><a name="[1b9]"></a>Math_Rad2Deg</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, mymath.o(i.Math_Rad2Deg))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Math_Rad2Deg &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_Course2Dest
</UL>

<P><STRONG><a name="[14b]"></a>Math_RoundAngle</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mymath.o(i.Math_RoundAngle))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_Follow_Mode
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_TwoPoint_Angle
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
</UL>

<P><STRONG><a name="[10d]"></a>Math_TwoCell_Dis</STRONG> (Thumb, 172 bytes, Stack size 56 bytes, mymath.o(i.Math_TwoCell_Dis))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Math_TwoCell_Dis &rArr; __hardfp_round &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
</UL>

<P><STRONG><a name="[113]"></a>Math_TwoCell_Equal</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, map.o(i.Math_TwoCell_Equal))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Math_TwoCell_Equal
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
</UL>

<P><STRONG><a name="[10b]"></a>Math_TwoPoint_Angle</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, mymath.o(i.Math_TwoPoint_Angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Math_TwoPoint_Angle &rArr; Math_Course2Dest &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_GetAngle
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_RoundAngle
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_Course2Dest
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
</UL>

<P><STRONG><a name="[4]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f30x_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1bb]"></a>Mode_GetLog</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, movement.o(i.Mode_GetLog))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_GetMode
</UL>

<P><STRONG><a name="[bc]"></a>Mode_GetMode</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, movement.o(i.Mode_GetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Mode_GetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_GetLog
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Report_Map
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Even_Report
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ControlTask
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_All_Data_Init
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_Follow_Mode
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Interface
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standby_Mode
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_Mode
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Mode
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_WorkConfigure
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_Initialize
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HomeStraight_Mode
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_Cmd
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MapTouring
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_MainTask
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_FillGap
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_Move_Turn
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_Move_Back
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_HomeConfigure
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_AbnormalHandler
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_SpotConfigure
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_SetCell
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_IsLaneCleaned
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_NavDebug_Line
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShortestPath_CreatePathPoint
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathLine_FindNextLines
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathLine_FindAllLines
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_LaneCleaned
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_mode_handle
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Display
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Breath
</UL>

<P><STRONG><a name="[e9]"></a>Mode_SetMode</STRONG> (Thumb, 98 bytes, Stack size 4 bytes, movement.o(i.Mode_SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Mode_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Get_Mode_Flag
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_UpdateLog
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_SetModeAndSelection
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SensorsTask
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ControlTask
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_Follow_Mode
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Interface
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standby_Mode
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_Mode
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Mode
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HomeStraight_Mode
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MapTouring
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_MainTask
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_SetCell
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_mode_handle
</UL>

<P><STRONG><a name="[1be]"></a>Mode_SetModeAndSelection</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, movement.o(i.Mode_SetModeAndSelection))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Mode_SetModeAndSelection &rArr; Mode_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_SetMode
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_SetModeSelection
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserInterFace_RemoteToMode
</UL>

<P><STRONG><a name="[1bf]"></a>Mode_SetModeSelection</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, movement.o(i.Mode_SetModeSelection))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_SetModeAndSelection
</UL>

<P><STRONG><a name="[1bc]"></a>Mode_UpdateLog</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, movement.o(i.Mode_UpdateLog))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_SetMode
</UL>

<P><STRONG><a name="[1c0]"></a>Motor_DisableAll</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, movement.o(i.Motor_DisableAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Motor_DisableAll &rArr; Motor_SetPower &rArr; Motor_SetState
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActList_Clear
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_Stop
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WHEEL_DISABLE
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vacuum_TurnOff
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_SetPower
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_SetCheckState
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cliff_SetDetectState
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ControlTask
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Interface
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_Mode
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_GyroFunction
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_MainTask
</UL>

<P><STRONG><a name="[23a]"></a>Motor_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, movement.o(i.Motor_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ControlTask
</UL>

<P><STRONG><a name="[109]"></a>Motor_GetStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, movement.o(i.Motor_GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_Follow_Mode
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Mode
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HomeStraight_Mode
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
</UL>

<P><STRONG><a name="[18c]"></a>Motor_HomeConfigure</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, movement.o(i.Motor_HomeConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Motor_HomeConfigure &rArr; Motor_SetPower &rArr; Motor_SetState
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bumper_ResetErrorCnt
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_EnableAll
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_GetMode
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_ResetSlowCnt
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_SetPower
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cliff_SetDetectState
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HomeStraight_Mode
</UL>

<P><STRONG><a name="[122]"></a>Motor_ResetStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, movement.o(i.Motor_ResetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_Follow_Mode
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Interface
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
</UL>

<P><STRONG><a name="[8d]"></a>Motor_SetCheckState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, movement.o(i.Motor_SetCheckState))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_DisableAll
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_MoveToPoint
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_AbnormalHandler
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_MoveForward
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Turn
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_MoveBack
</UL>

<P><STRONG><a name="[b0]"></a>Motor_SetPower</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, movement.o(i.Motor_SetPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Motor_SetPower &rArr; Motor_SetState
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vacuum_SetSpeed
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_SetState
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_WorkConfigure
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_DisableAll
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_HomeConfigure
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_AbnormalHandler
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_SpotConfigure
</UL>

<P><STRONG><a name="[1c4]"></a>Motor_SetState</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, movement.o(i.Motor_SetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Motor_SetState
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Brush_Side_SetPWM
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Brush_Main_SetPWM
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_SetPower
</UL>

<P><STRONG><a name="[1c5]"></a>Motor_SpotConfigure</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, movement.o(i.Motor_SpotConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Motor_SpotConfigure &rArr; Motor_SetPower &rArr; Motor_SetState
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bumper_ResetErrorCnt
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_EnableAll
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_GetMode
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_ResetSlowCnt
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_SetPower
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cliff_SetDetectState
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_Mode
</UL>

<P><STRONG><a name="[1c6]"></a>Motor_TunePower</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, movement.o(i.Motor_TunePower))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Motor_TunePower
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_GetVoltage
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Brush_Side_SetPWM
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Brush_Main_SetPWM
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ControlTask
</UL>

<P><STRONG><a name="[be]"></a>Motor_WorkConfigure</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, movement.o(i.Motor_WorkConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Motor_WorkConfigure &rArr; Motor_SetPower &rArr; Motor_SetState
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bumper_ResetErrorCnt
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_EnableAll
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_GetMode
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_ResetSlowCnt
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_SetPower
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cliff_SetDetectState
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_Follow_Mode
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Mode
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MapTouring
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_GyroFunction
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_AbnormalHandler
</UL>

<P><STRONG><a name="[2]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f30x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c7]"></a>NVIC_Configuration</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, sysinitialize.o(i.NVIC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = NVIC_Configuration &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_set
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInitialize
</UL>

<P><STRONG><a name="[1ca]"></a>OBS_DynamicProcess</STRONG> (Thumb, 606 bytes, Stack size 8 bytes, obscliff.o(i.OBS_DynamicProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OBS_DynamicProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_Diff_int
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SensorsTask
</UL>

<P><STRONG><a name="[266]"></a>OBS_GetDynamicState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, obscliff.o(i.OBS_GetDynamicState))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SensorsTask
</UL>

<P><STRONG><a name="[11d]"></a>OBS_GetTrigStatus</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, obscliff.o(i.OBS_GetTrigStatus))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_Follow_Mode
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HomeStraight_Mode
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
</UL>

<P><STRONG><a name="[119]"></a>OBS_IsNear</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, obscliff.o(i.OBS_IsNear))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_Follow_Mode
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HomeStraight_Mode
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
</UL>

<P><STRONG><a name="[13f]"></a>OBS_IsWallNear</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, obscliff.o(i.OBS_IsWallNear))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
</UL>

<P><STRONG><a name="[145]"></a>OBS_L_F_Near</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, obscliff.o(i.OBS_L_F_Near))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = OBS_L_F_Near
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_GetLeftAverageAdcValue
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_Follow_Mode
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
</UL>

<P><STRONG><a name="[144]"></a>OBS_R_F_Near</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, obscliff.o(i.OBS_R_F_Near))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = OBS_R_F_Near
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_GetRightAverageAdcValue
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
</UL>

<P><STRONG><a name="[ea]"></a>OBS_ResetTrigValue</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, obscliff.o(i.OBS_ResetTrigValue))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_Follow_Mode
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_Mode
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HomeStraight_Mode
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MapTouring
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_MainTask
</UL>

<P><STRONG><a name="[91]"></a>OBS_SetDynamicState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, obscliff.o(i.OBS_SetDynamicState))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_Stop
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_MoveToPoint
</UL>

<P><STRONG><a name="[11e]"></a>OBS_SpotStatus</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, obscliff.o(i.OBS_SpotStatus))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
</UL>

<P><STRONG><a name="[197]"></a>PC_NavDebug</STRONG> (Thumb, 50 bytes, Stack size 48 bytes, debug.o(i.PC_NavDebug))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = PC_NavDebug &rArr; UpgradeNavData_simple
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpgradeNavData_simple
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendNavData
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathList_AddNewPoint
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_NavDebug_Line
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PointList_ShowAllPathPoints
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineList_GetNextLowPriorityPoint
</UL>

<P><STRONG><a name="[1ef]"></a>PC_NavDebug_AllMap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, debug.o(i.PC_NavDebug_AllMap))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_Next_V2
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_PathPlanning
</UL>

<P><STRONG><a name="[1ce]"></a>PC_NavDebug_Line</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, debug.o(i.PC_NavDebug_Line))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = PC_NavDebug_Line &rArr; PC_NavDebug &rArr; UpgradeNavData_simple
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_GetMode
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_NavDebug
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathLine_SortLines
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathLine_FindOneLine
</UL>

<P><STRONG><a name="[1cf]"></a>PathLine_AddLine</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, shortestpath.o(i.PathLine_AddLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = PathLine_AddLine &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathLine_LineExisted
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathLine_FindNextLines
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShortestPath_GeneratePath
</UL>

<P><STRONG><a name="[1d1]"></a>PathLine_FindAllLines</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, shortestpath.o(i.PathLine_FindAllLines))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = PathLine_FindAllLines &rArr; PathLine_FindNextLines &rArr; PathLine_FindOneLine &rArr; Map_IsBlock_Access &rArr; Map_Cell_Blocked &rArr; Map_GetCell &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_GetMode
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathLine_ReadLine
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathLine_IncreaseLevel
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathLine_GetLineCnt
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathLine_FindNextLines
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShortestPath_GeneratePath
</UL>

<P><STRONG><a name="[1d4]"></a>PathLine_FindNextLines</STRONG> (Thumb, 606 bytes, Stack size 88 bytes, shortestpath.o(i.PathLine_FindNextLines))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = PathLine_FindNextLines &rArr; PathLine_FindOneLine &rArr; Map_IsBlock_Access &rArr; Map_Cell_Blocked &rArr; Map_GetCell &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_GetMode
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_IsBlock_Access
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathLine_IsPosOnLine
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathLine_FindOneLine
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathLine_AddLine
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetList_StoreCurrentTarget
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetList_ReadTarget
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetList_ReadCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathLine_FindAllLines
</UL>

<P><STRONG><a name="[1d6]"></a>PathLine_FindOneLine</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, shortestpath.o(i.PathLine_FindOneLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = PathLine_FindOneLine &rArr; Map_IsBlock_Access &rArr; Map_Cell_Blocked &rArr; Map_GetCell &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_NavDebug_Line
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_IsBlock_Access
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathLine_GetLineLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathLine_FindNextLines
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShortestPath_GeneratePath
</UL>

<P><STRONG><a name="[f5]"></a>PathLine_GetAcreage</STRONG> (Thumb, 54 bytes, Stack size 36 bytes, shortestpath.o(i.PathLine_GetAcreage))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = PathLine_GetAcreage
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathLine_ReadLine
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathLine_GetLineCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MapTouring
</UL>

<P><STRONG><a name="[1d2]"></a>PathLine_GetLineCnt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, shortestpath.o(i.PathLine_GetLineCnt))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathLine_GetAcreage
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShortestPath_CreatePathPoint
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathLine_LineExisted
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathLine_FindAllLines
</UL>

<P><STRONG><a name="[1db]"></a>PathLine_GetLineLevel</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, shortestpath.o(i.PathLine_GetLineLevel))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathLine_FindOneLine
</UL>

<P><STRONG><a name="[1d5]"></a>PathLine_IncreaseLevel</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, shortestpath.o(i.PathLine_IncreaseLevel))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathLine_FindAllLines
</UL>

<P><STRONG><a name="[1d8]"></a>PathLine_IsPosOnLine</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, shortestpath.o(i.PathLine_IsPosOnLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PathLine_IsPosOnLine
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShortestPath_CreatePathPoint
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathLine_FindNextLines
</UL>

<P><STRONG><a name="[1d0]"></a>PathLine_LineExisted</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, shortestpath.o(i.PathLine_LineExisted))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PathLine_LineExisted
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathLine_GetLineCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathLine_AddLine
</UL>

<P><STRONG><a name="[1d3]"></a>PathLine_ReadLine</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, shortestpath.o(i.PathLine_ReadLine))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathLine_GetAcreage
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathLine_FindAllLines
</UL>

<P><STRONG><a name="[1dc]"></a>PathLine_Reset</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, shortestpath.o(i.PathLine_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PathLine_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathLine_ResetLineLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShortestPath_GeneratePath
</UL>

<P><STRONG><a name="[1dd]"></a>PathLine_ResetLineLevel</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, shortestpath.o(i.PathLine_ResetLineLevel))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathLine_Reset
</UL>

<P><STRONG><a name="[1de]"></a>PathLine_SortLines</STRONG> (Thumb, 306 bytes, Stack size 40 bytes, shortestpath.o(i.PathLine_SortLines))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = PathLine_SortLines &rArr; PC_NavDebug_Line &rArr; PC_NavDebug &rArr; UpgradeNavData_simple
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_Diff_int
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_GetMax
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_NavDebug_Line
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_GetMin
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShortestPath_GeneratePath
</UL>

<P><STRONG><a name="[1df]"></a>PathList_AddNewPoint</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, pathplanning.o(i.PathList_AddNewPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = PathList_AddNewPoint &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRobotCell
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_TwoCellMatch
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_NavDebug
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathPoint_AddPathPointToPathList
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_PathPlanning
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_NormalClean
</UL>

<P><STRONG><a name="[e2]"></a>PathList_Clear</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pathplanning.o(i.PathList_Clear))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_Mode
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MapTouring
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_GyroFunction
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_PathPlanning
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShortestPath_GeneratePath
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_NormalClean
</UL>

<P><STRONG><a name="[fd]"></a>PathList_GetCnt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pathplanning.o(i.PathList_GetCnt))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MapTouring
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_NormalClean
</UL>

<P><STRONG><a name="[110]"></a>PathList_GetNextPathListPoint</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, pathplanning.o(i.PathList_GetNextPathListPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = PathList_GetNextPathListPoint &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_CellToPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
</UL>

<P><STRONG><a name="[ec]"></a>PathList_Out</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, pathplanning.o(i.PathList_Out))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = PathList_Out &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_Mode
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MapTouring
</UL>

<P><STRONG><a name="[21a]"></a>PathList_ReadLastPath</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, pathplanning.o(i.PathList_ReadLastPath))
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_PathPlanning
</UL>

<P><STRONG><a name="[fa]"></a>PathList_ReadPath</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, pathplanning.o(i.PathList_ReadPath))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MapTouring
</UL>

<P><STRONG><a name="[1e0]"></a>PathList_ShowAll</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, pathplanning.o(i.PathList_ShowAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = PathList_ShowAll &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_PathPlanning
</UL>

<P><STRONG><a name="[1e1]"></a>PathPoint_AddOnePoint</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, shortestpath.o(i.PathPoint_AddOnePoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = PathPoint_AddOnePoint &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_IsLaneCleaned
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShortestPath_CreatePathPoint
</UL>

<P><STRONG><a name="[1e2]"></a>PathPoint_AddPathPointToPathList</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, shortestpath.o(i.PathPoint_AddPathPointToPathList))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = PathPoint_AddPathPointToPathList &rArr; PathList_AddNewPoint &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathPoint_ReadPoint
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathPoint_GetPointCnt
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathList_AddNewPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_WallFineWay
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_Next_V2
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_PathPlanning
</UL>

<P><STRONG><a name="[e4]"></a>PathPoint_ClearAllPoints</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, shortestpath.o(i.PathPoint_ClearAllPoints))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PathPoint_ClearAllPoints
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathPoint_GetPointCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MapTouring
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_GyroFunction
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_PathPlanning
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_IsLaneCleaned
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShortestPath_GeneratePath
</UL>

<P><STRONG><a name="[1e5]"></a>PathPoint_EditPoint</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, shortestpath.o(i.PathPoint_EditPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = PathPoint_EditPoint &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathPoints_Rearrange
</UL>

<P><STRONG><a name="[1e4]"></a>PathPoint_GetPointCnt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, shortestpath.o(i.PathPoint_GetPointCnt))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathPoint_ClearAllPoints
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathPoint_RemoveOnePoint
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathPoint_AddPathPointToPathList
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathPoint_SortPoints
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PointList_ShowAllPathPoints
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathPoints_Rearrange
</UL>

<P><STRONG><a name="[1f1]"></a>PathPoint_ReadLastPoint</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, shortestpath.o(i.PathPoint_ReadLastPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PathPoint_ReadLastPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_WallFineWay
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_Next_V2
</UL>

<P><STRONG><a name="[1e3]"></a>PathPoint_ReadPoint</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, shortestpath.o(i.PathPoint_ReadPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = PathPoint_ReadPoint &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathPoint_AddPathPointToPathList
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathPoint_SortPoints
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PointList_ShowAllPathPoints
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathPoints_Rearrange
</UL>

<P><STRONG><a name="[1e6]"></a>PathPoint_RemoveOnePoint</STRONG> (Thumb, 62 bytes, Stack size 4 bytes, shortestpath.o(i.PathPoint_RemoveOnePoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PathPoint_RemoveOnePoint
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathPoint_GetPointCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathPoint_SortPoints
</UL>

<P><STRONG><a name="[1e7]"></a>PathPoint_SortPoints</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, spot.o(i.PathPoint_SortPoints))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = PathPoint_SortPoints &rArr; PathPoint_ReadPoint &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathPoint_RemoveOnePoint
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathPoint_ReadPoint
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathPoint_GetPointCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_IsLaneCleaned
</UL>

<P><STRONG><a name="[1e8]"></a>PathPoints_Rearrange</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, shortestpath.o(i.PathPoints_Rearrange))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = PathPoints_Rearrange &rArr; PathPoint_EditPoint &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathPoint_ReadPoint
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathPoint_GetPointCnt
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathPoint_EditPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_WallFineWay
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_Next_V2
</UL>

<P><STRONG><a name="[f2]"></a>Path_BlockAllTargetPoints</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, pathplanning.o(i.Path_BlockAllTargetPoints))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = Path_BlockAllTargetPoints &rArr; Map_SetBlockIfUnclean &rArr; Map_SetCell &rArr; AC_RealMap_AddPoint &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetList_Clear
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_SetBlockIfUnclean
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetCell
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MapTouring
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
</UL>

<P><STRONG><a name="[1e9]"></a>Path_CheckRoundable</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, pathplanning.o(i.Path_CheckRoundable))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = Path_CheckRoundable &rArr; Map_GetCell &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetXMin
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetXMax
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetCell
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_NormalClean
</UL>

<P><STRONG><a name="[19a]"></a>Path_GetCellHeading8</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, pathplanning.o(i.Path_GetCellHeading8))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Path_GetCellHeading8 &rArr; Math_Course2Dest &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_Course2Dest
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineList_GetNextLowPriorityPoint
</UL>

<P><STRONG><a name="[100]"></a>Path_GetNormalWallDir</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, pathplanning.o(i.Path_GetNormalWallDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Path_GetNormalWallDir &rArr; Map_GetRobotCellY &rArr; Map_CountToCell &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_GetAngle
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRobotCellY
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MapTouring
</UL>

<P><STRONG><a name="[13a]"></a>Path_GetRobotDirection</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, pathplanning.o(i.Path_GetRobotDirection))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Path_GetRobotDirection &rArr; __hardfp_round &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_GetAngle
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_GetRobotHeading4
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_LaneCleaned
</UL>

<P><STRONG><a name="[d3]"></a>Path_GetRobotHeading4</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, pathplanning.o(i.Path_GetRobotHeading4))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_UpdatePosition
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_GetShortWallDir
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_GetRobotDirection
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_SetTrapWallDir
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_IsCrossLane
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_OverLane
</UL>

<P><STRONG><a name="[104]"></a>Path_GetRobotHeading8</STRONG> (Thumb, 256 bytes, Stack size 8 bytes, pathplanning.o(i.Path_GetRobotHeading8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Path_GetRobotHeading8
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_GetAngle
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_GetShortWallDir
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_UpdateRobotPos
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_NormalClean
</UL>

<P><STRONG><a name="[fc]"></a>Path_GetShortWallDir</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, pathplanning.o(i.Path_GetShortWallDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Path_GetShortWallDir &rArr; Map_GetCell &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_GetAngle
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_GetRobotHeading8
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_GetRobotHeading4
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetCell
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MapTouring
</UL>

<P><STRONG><a name="[118]"></a>Path_IsCell_ReachBlocked</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, map.o(i.Path_IsCell_ReachBlocked))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = Path_IsCell_ReachBlocked &rArr; Map_GetRelativeByCell &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRelativeByCell
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_IsBlock_Access2
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
</UL>

<P><STRONG><a name="[114]"></a>Path_IsOnPosition</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, pathplanning.o(i.Path_IsOnPosition))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Path_IsOnPosition
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_Diff_int
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
</UL>

<P><STRONG><a name="[1ea]"></a>Path_LaneCleaned</STRONG> (Thumb, 484 bytes, Stack size 40 bytes, pathplanning.o(i.Path_LaneCleaned))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = Path_LaneCleaned &rArr; Map_BrushBlockUnclean &rArr; Map_GetCell &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_GetMode
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_GetRobotDirection
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_BrushBlockUnclean
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_Cell_Blocked
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_NormalClean
</UL>

<P><STRONG><a name="[f1]"></a>Path_Next_V2</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, pathplanning.o(i.Path_Next_V2))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = Path_Next_V2 &rArr; ShortestPath_GeneratePath &rArr; PathLine_FindAllLines &rArr; PathLine_FindNextLines &rArr; PathLine_FindOneLine &rArr; Map_IsBlock_Access &rArr; Map_Cell_Blocked &rArr; Map_GetCell &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRobotCell
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathPoint_AddPathPointToPathList
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_NavDebug_AllMap
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShortestPath_GeneratePath
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathPoints_Rearrange
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathPoint_ReadLastPoint
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetList_ShowAll
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetList_Rearrange
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetList_CreateList
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_NormalClean
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MapTouring
</UL>

<P><STRONG><a name="[1eb]"></a>Path_NormalClean</STRONG> (Thumb, 926 bytes, Stack size 72 bytes, pathplanning.o(i.Path_NormalClean))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = Path_NormalClean &rArr; CM_SetBlockedByOffset &rArr; Map_GetRelativeByCell &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRobotCell
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathList_Clear
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_GetRobotHeading8
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathList_GetCnt
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_SetBlockedByOffset
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathList_AddNewPoint
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_BrushBlockUnclean
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_UpdateRobotPos
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_RobotNotMoving
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_LaneCleaned
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_CheckRoundable
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_WallFineWay
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_Next_V2
</UL>

<P><STRONG><a name="[140]"></a>Path_OverLane</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, pathplanning.o(i.Path_OverLane))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Path_OverLane
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_Diff_int
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
</UL>

<P><STRONG><a name="[ef]"></a>Path_RobotCloseToTargetCell</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, pathplanning.o(i.Path_RobotCloseToTargetCell))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Path_RobotCloseToTargetCell &rArr; Map_GetRobotCell &rArr; Map_GetRobotCellY &rArr; Map_CountToCell &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRobotCell
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_Diff_int
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_Mode
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MapTouring
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
</UL>

<P><STRONG><a name="[10e]"></a>Path_RobotCloseToTargetCount</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, pathplanning.o(i.Path_RobotCloseToTargetCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Path_RobotCloseToTargetCount &rArr; Map_GetRobotCount &rArr; __hardfp_round &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_Diff_int
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRobotCount
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
</UL>

<P><STRONG><a name="[153]"></a>Path_RobotLeaveToTargetCell</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, pathplanning.o(i.Path_RobotLeaveToTargetCell))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Path_RobotLeaveToTargetCell &rArr; Map_GetRobotCell &rArr; Map_GetRobotCellY &rArr; Map_CountToCell &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRobotCell
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_Diff_int
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
</UL>

<P><STRONG><a name="[1f3]"></a>Path_RobotNotMoving</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, pathplanning.o(i.Path_RobotNotMoving))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_NormalClean
</UL>

<P><STRONG><a name="[90]"></a>Path_SetCurrentTargetPoint</STRONG> (Thumb, 14 bytes, Stack size 12 bytes, pathplanning.o(i.Path_SetCurrentTargetPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Path_SetCurrentTargetPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_MoveToPoint
</UL>

<P><STRONG><a name="[f3]"></a>Path_SetHomeCellEmpty</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, pathplanning.o(i.Path_SetHomeCellEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Path_SetHomeCellEmpty &rArr; Map_SetCell &rArr; AC_RealMap_AddPoint &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speaker
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetHomeCell
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_SetCell
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MapTouring
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
</UL>

<P><STRONG><a name="[1f2]"></a>Path_UpdateRobotPos</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, pathplanning.o(i.Path_UpdateRobotPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Path_UpdateRobotPos &rArr; Map_GetRobotCell &rArr; Map_GetRobotCellY &rArr; Map_CountToCell &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRobotCell
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_GetRobotHeading8
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_NormalClean
</UL>

<P><STRONG><a name="[1f4]"></a>Path_WallFineWay</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, pathplanning.o(i.Path_WallFineWay))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = Path_WallFineWay &rArr; ShortestPath_GeneratePath &rArr; PathLine_FindAllLines &rArr; PathLine_FindNextLines &rArr; PathLine_FindOneLine &rArr; Map_IsBlock_Access &rArr; Map_Cell_Blocked &rArr; Map_GetCell &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRobotCell
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathPoint_AddPathPointToPathList
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShortestPath_GeneratePath
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathPoints_Rearrange
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathPoint_ReadLastPoint
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetList_CreateList
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_NormalClean
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_CalculatePathTask
</UL>

<P><STRONG><a name="[1f5]"></a>PointList_ShowAllPathPoints</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, shortestpath.o(i.PointList_ShowAllPathPoints))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = PointList_ShowAllPathPoints &rArr; PathPoint_ReadPoint &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathPoint_ReadPoint
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathPoint_GetPointCnt
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_NavDebug
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShortestPath_GeneratePath
</UL>

<P><STRONG><a name="[1f6]"></a>Power_DisableAll</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, movement.o(i.Power_DisableAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Power_DisableAll
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_5v
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_3v3
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c1]"></a>Power_EnableAll</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, movement.o(i.Power_EnableAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Power_EnableAll
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_5v
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_3v3
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Interface
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_WorkConfigure
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_HomeConfigure
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_SpotConfigure
</UL>

<P><STRONG><a name="[313]"></a>Queue_Read_Byte</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, system.o(i.Queue_Read_Byte))
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_service
</UL>

<P><STRONG><a name="[1f9]"></a>RCC_Configuration</STRONG> (Thumb, 256 bytes, Stack size 8 bytes, sysinitialize.o(i.RCC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_Configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_adc_clock_config
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInitialize
</UL>

<P><STRONG><a name="[22e]"></a>RTC_Configuration</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, rtc.o(i.RTC_Configuration))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInitialize
</UL>

<P><STRONG><a name="[e]"></a>RTC_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gd32f30x_it.o(i.RTC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RTC_IRQHandler &rArr; Mode_GetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_GetMode
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_flag_get
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_flag_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a2]"></a>RW_DIR_BACKWARD</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wheel.o(i.RW_DIR_BACKWARD))
<BR><BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetRightDir
</UL>

<P><STRONG><a name="[2a1]"></a>RW_DIR_FORWARD</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wheel.o(i.RW_DIR_FORWARD))
<BR><BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetRightDir
</UL>

<P><STRONG><a name="[17b]"></a>Rcon_BR</STRONG> (Thumb, 744 bytes, Stack size 4 bytes, rcon.o(i.Rcon_BR))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Rcon_BR
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcon_SetRemoteCode
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI5_9_IRQHandler
</UL>

<P><STRONG><a name="[177]"></a>Rcon_FL</STRONG> (Thumb, 744 bytes, Stack size 4 bytes, rcon.o(i.Rcon_FL))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Rcon_FL
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcon_SetRemoteCode
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
</UL>

<P><STRONG><a name="[17a]"></a>Rcon_FR</STRONG> (Thumb, 744 bytes, Stack size 4 bytes, rcon.o(i.Rcon_FR))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Rcon_FR
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcon_SetRemoteCode
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI5_9_IRQHandler
</UL>

<P><STRONG><a name="[18d]"></a>Rcon_GetRemoteCode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rcon.o(i.Rcon_GetRemoteCode))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcon_RemoteKey
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_Follow_Mode
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Interface
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standby_Mode
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Mode
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HomeStraight_Mode
</UL>

<P><STRONG><a name="[18e]"></a>Rcon_GetStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rcon.o(i.Rcon_GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HomeStraight_Mode
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Right_Meet_Station
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Meet_Station
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Left_Meet_Station
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcon_IsGotStationSignal
</UL>

<P><STRONG><a name="[191]"></a>Rcon_IsGotStationSignal</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, rcon.o(i.Rcon_IsGotStationSignal))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Rcon_IsGotStationSignal
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcon_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HomeStraight_Mode
</UL>

<P><STRONG><a name="[178]"></a>Rcon_L</STRONG> (Thumb, 744 bytes, Stack size 4 bytes, rcon.o(i.Rcon_L))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Rcon_L
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcon_SetRemoteCode
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
</UL>

<P><STRONG><a name="[179]"></a>Rcon_R</STRONG> (Thumb, 744 bytes, Stack size 4 bytes, rcon.o(i.Rcon_R))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Rcon_R
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcon_SetRemoteCode
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI5_9_IRQHandler
</UL>

<P><STRONG><a name="[120]"></a>Rcon_RemoteKey</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, rcon.o(i.Rcon_RemoteKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Rcon_RemoteKey &rArr; Rcon_ResetRemoteCode
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcon_ResetRemoteCode
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcon_GetRemoteCode
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SensorsTask
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HomeStraight_Mode
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
</UL>

<P><STRONG><a name="[121]"></a>Rcon_ResetRemoteCode</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, rcon.o(i.Rcon_ResetRemoteCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Rcon_ResetRemoteCode
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcon_SetRemoteCode
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserInterFace_RemoteToMode
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserInterFace_BeginToWork
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcon_RemoteKey
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_Follow_Mode
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Interface
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standby_Mode
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Mode
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HomeStraight_Mode
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
</UL>

<P><STRONG><a name="[9c]"></a>Rcon_ResetStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rcon.o(i.Rcon_ResetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_Follow_Mode
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Interface
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HomeStraight_Mode
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MapTouring
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adjust_Home_Path
</UL>

<P><STRONG><a name="[1fb]"></a>Rcon_SetRemoteCode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rcon.o(i.Rcon_SetRemoteCode))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcon_ResetRemoteCode
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcon_R
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcon_L
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcon_FR
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcon_FL
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcon_BR
</UL>

<P><STRONG><a name="[233]"></a>Rcon_Timer</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, rcon.o(i.Rcon_Timer))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER5_IRQHandler
</UL>

<P><STRONG><a name="[1fc]"></a>Remote_Mode</STRONG> (Thumb, 1252 bytes, Stack size 32 bytes, remote_mode.o(i.Remote_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = Remote_Mode &rArr; ActList_Switch &rArr; Action_Head2Cource &rArr; CM_HeadToTarget &rArr; CM_HeadToCourse &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_GetRemoteCode
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetTargetStep
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_GetRightStep
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_GetStatus
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cliff_GetDetectiontProcess_Result
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_IsLow
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_WaitForMoveEnded
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActList_Clear
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActList_Add
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcon_ResetRemoteCode
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcon_GetRemoteCode
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bumper_GetTrigStatus
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_GetCode
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_Stop
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_GetRightSpeed
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_GetLeftStep
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_GetLeftSpeed
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speaker
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_WorkConfigure
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_SetMode
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_GetMode
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_SetCode
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_SetMove
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_GetMove
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActList_Switch
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_MainTask
</UL>

<P><STRONG><a name="[22d]"></a>SPI2_Configuration</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, sysinitialize.o(i.SPI2_Configuration))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInitialize
</UL>

<P><STRONG><a name="[9e]"></a>SPI2_ReadWriteByte</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, spi.o(i.SPI2_ReadWriteByte))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Page
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Enable
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadSR
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Sector
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
</UL>

<P><STRONG><a name="[1fe]"></a>SPK_Report_Error</STRONG> (Thumb, 110 bytes, Stack size 4 bytes, speaker.o(i.SPK_Report_Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SPK_Report_Error
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speaker
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Interface
</UL>

<P><STRONG><a name="[1f7]"></a>Set_3v3</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, movement.o(i.Set_3v3))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_EnableAll
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_DisableAll
</UL>

<P><STRONG><a name="[1f8]"></a>Set_5v</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, movement.o(i.Set_5v))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_EnableAll
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_DisableAll
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[172]"></a>Set_LED</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, display.o(i.Set_LED))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Set_LED
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Process
</UL>

<P><STRONG><a name="[1ff]"></a>Set_LED1_On_Blink</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, display.o(i.Set_LED1_On_Blink))
<BR><BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserInterFace_BeginToWork
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LED_On_Blink
</UL>

<P><STRONG><a name="[205]"></a>Set_LED1_On_Switch</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, display.o(i.Set_LED1_On_Switch))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LED_On_Switch
</UL>

<P><STRONG><a name="[200]"></a>Set_LED2_On_Blink</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, display.o(i.Set_LED2_On_Blink))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LED_On_Blink
</UL>

<P><STRONG><a name="[206]"></a>Set_LED2_On_Switch</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, display.o(i.Set_LED2_On_Switch))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LED_On_Switch
</UL>

<P><STRONG><a name="[201]"></a>Set_LED3_On_Blink</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, display.o(i.Set_LED3_On_Blink))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LED_On_Blink
</UL>

<P><STRONG><a name="[207]"></a>Set_LED3_On_Switch</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, display.o(i.Set_LED3_On_Switch))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LED_On_Switch
</UL>

<P><STRONG><a name="[202]"></a>Set_LED4_On_Blink</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, display.o(i.Set_LED4_On_Blink))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LED_On_Blink
</UL>

<P><STRONG><a name="[173]"></a>Set_LED4_On_Switch</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, display.o(i.Set_LED4_On_Switch))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_SetBattery
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LED_On_Switch
</UL>

<P><STRONG><a name="[203]"></a>Set_LED5_On_Blink</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, display.o(i.Set_LED5_On_Blink))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LED_On_Blink
</UL>

<P><STRONG><a name="[174]"></a>Set_LED5_On_Switch</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, display.o(i.Set_LED5_On_Switch))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_SetBattery
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LED_On_Switch
</UL>

<P><STRONG><a name="[204]"></a>Set_LED6_On_Blink</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, display.o(i.Set_LED6_On_Blink))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LED_On_Blink
</UL>

<P><STRONG><a name="[208]"></a>Set_LED6_On_Switch</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, display.o(i.Set_LED6_On_Switch))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LED_On_Switch
</UL>

<P><STRONG><a name="[16e]"></a>Set_LED_On_Blink</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, display.o(i.Set_LED_On_Blink))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Set_LED_On_Blink
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LED1_On_Blink
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LED6_On_Blink
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LED5_On_Blink
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LED4_On_Blink
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LED3_On_Blink
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LED2_On_Blink
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Process
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Interface
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standby_Mode
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_GyroFunction
</UL>

<P><STRONG><a name="[171]"></a>Set_LED_On_Switch</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, display.o(i.Set_LED_On_Switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Set_LED_On_Switch
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LED6_On_Switch
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LED5_On_Switch
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LED4_On_Switch
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LED3_On_Switch
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LED2_On_Switch
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LED1_On_Switch
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Process
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Interface
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standby_Mode
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_GyroFunction
</UL>

<P><STRONG><a name="[16c]"></a>Set_LED_Table</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, display.o(i.Set_LED_Table))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Set_LED_Table
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Breath
</UL>

<P><STRONG><a name="[209]"></a>Set_Upgrade_Flag</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, wifiota.o(i.Set_Upgrade_Flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Set_Upgrade_Flag &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_firm_update_handle
</UL>

<P><STRONG><a name="[2db]"></a>Set_VacMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bldc.o(i.Set_VacMode))
<BR><BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_suck_handle
</UL>

<P><STRONG><a name="[249]"></a>Set_Wifi_Enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wifiota.o(i.Set_Wifi_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_MainTask
</UL>

<P><STRONG><a name="[231]"></a>Set_near_Flag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, obscliff.o(i.Set_near_Flag))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[20b]"></a>ShortestPath_CreatePathPoint</STRONG> (Thumb, 314 bytes, Stack size 48 bytes, shortestpath.o(i.ShortestPath_CreatePathPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = ShortestPath_CreatePathPoint &rArr; LineList_GetNextLowPriorityPoint &rArr; Path_GetCellHeading8 &rArr; Math_Course2Dest &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_GetMode
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_Diff_int
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathPoint_AddOnePoint
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathLine_IsPosOnLine
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathLine_GetLineCnt
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineList_GetNextLowPriorityPoint
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetList_GetCurrentTarget
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShortestPath_GeneratePath
</UL>

<P><STRONG><a name="[1f0]"></a>ShortestPath_GeneratePath</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, shortestpath.o(i.ShortestPath_GeneratePath))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = ShortestPath_GeneratePath &rArr; PathLine_FindAllLines &rArr; PathLine_FindNextLines &rArr; PathLine_FindOneLine &rArr; Map_IsBlock_Access &rArr; Map_Cell_Blocked &rArr; Map_GetCell &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathPoint_ClearAllPoints
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathList_Clear
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShortestPath_CreatePathPoint
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PointList_ShowAllPathPoints
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathLine_SortLines
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathLine_Reset
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathLine_FindOneLine
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathLine_FindAllLines
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathLine_AddLine
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_WallFineWay
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_Next_V2
</UL>

<P><STRONG><a name="[b8]"></a>Side_Brush_GetCurrent</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, brush.o(i.Side_Brush_GetCurrent))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_AbnormalHandler
</UL>

<P><STRONG><a name="[253]"></a>Side_Brush_GetCurrentAdc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, brush.o(i.Side_Brush_GetCurrentAdc))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SensorsTask
</UL>

<P><STRONG><a name="[25d]"></a>Side_Brush_SetCurrent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, brush.o(i.Side_Brush_SetCurrent))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SensorsTask
</UL>

<P><STRONG><a name="[112]"></a>Speaker</STRONG> (Thumb, 556 bytes, Stack size 0 bytes, speaker.o(i.Speaker))
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPK_Report_Error
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charge_Process
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_Follow_Mode
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Interface
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_Mode
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Mode
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_MainTask
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_SetHomeCellEmpty
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_firm_update_handle
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wifi_status
</UL>

<P><STRONG><a name="[11f]"></a>Speed_Stop</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, wheel.o(i.Speed_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Speed_Stop &rArr; Wheel_SetTargetSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetTargetSpeed
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
</UL>

<P><STRONG><a name="[20d]"></a>Spot_ClearCleanCells</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, spot.o(i.Spot_ClearCleanCells))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Spot_ClearCleanCells &rArr; Map_SetCell &rArr; AC_RealMap_AddPoint &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_SetCell
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetCell
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_PathPlanning
</UL>

<P><STRONG><a name="[219]"></a>Spot_GetDir</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, spot.o(i.Spot_GetDir))
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_PathPlanning
</UL>

<P><STRONG><a name="[218]"></a>Spot_GetLaneIdx</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spot.o(i.Spot_GetLaneIdx))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_OverLane
</UL>

<P><STRONG><a name="[20e]"></a>Spot_GetNextLanePos</STRONG> (Thumb, 498 bytes, Stack size 48 bytes, spot.o(i.Spot_GetNextLanePos))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Spot_GetNextLanePos &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_Abs_int
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_PathPlanning
</UL>

<P><STRONG><a name="[13b]"></a>Spot_GetPointLaneIdx</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, spot.o(i.Spot_GetPointLaneIdx))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Spot_GetPointLaneIdx &rArr; Math_Absolute &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_GetMax
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_Absolute
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
</UL>

<P><STRONG><a name="[14c]"></a>Spot_GetSpiralDir</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, spot.o(i.Spot_GetSpiralDir))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_Mode
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_PathPlanning
</UL>

<P><STRONG><a name="[20f]"></a>Spot_IsLaneCleaned</STRONG> (Thumb, 830 bytes, Stack size 104 bytes, spot.o(i.Spot_IsLaneCleaned))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = Spot_IsLaneCleaned &rArr; Map_IsRobotAccessible &rArr; Map_GetCell &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathPoint_ClearAllPoints
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_GetMode
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_Diff_int
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathPoint_AddOnePoint
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_Deg2Rad
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_Course2Dest
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_IsRobotAccessible
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_BrushBlockUnclean
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathPoint_SortPoints
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_PathPlanning
</UL>

<P><STRONG><a name="[213]"></a>Spot_Mode</STRONG> (Thumb, 772 bytes, Stack size 88 bytes, spot.o(i.Spot_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = Spot_Mode &rArr; CM_WallToMap &rArr; CM_WallFollowByCnt &rArr; CM_AbnormalHandler &rArr; ActList_Switch &rArr; Action_Head2Cource &rArr; CM_HeadToTarget &rArr; CM_HeadToCourse &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRobotCell
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speaker
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathList_Clear
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBS_ResetTrigValue
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_DisableAll
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_SetMode
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_GetMode
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_Initialize
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM42688_Config
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_Cmd
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToMap
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_AdjustBaseline
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_RobotCloseToTargetCell
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathList_Out
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_SpotConfigure
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_GetMax
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_Absolute
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gryo_GetUpdateFlag
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallToMap
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_UpdateMapBumper
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_ResetWallOutTrapCnt
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_SetSpiralDir
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_SetLaneIdx
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_SetDir
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_SetClearFlag
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_PathPlanning
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_GetSpiralDir
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_MainTask
</UL>

<P><STRONG><a name="[14e]"></a>Spot_OverLane</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, spot.o(i.Spot_OverLane))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Spot_OverLane &rArr; Math_Course2Dest &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_GetRobotHeading4
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_Course2Dest
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRobotCount
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_GetLaneIdx
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
</UL>

<P><STRONG><a name="[216]"></a>Spot_PathPlanning</STRONG> (Thumb, 380 bytes, Stack size 72 bytes, spot.o(i.Spot_PathPlanning))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = Spot_PathPlanning &rArr; Spot_IsLaneCleaned &rArr; Map_IsRobotAccessible &rArr; Map_GetCell &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathPoint_ClearAllPoints
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathList_Clear
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathPoint_AddPathPointToPathList
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathList_ShowAll
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathList_ReadLastPath
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathList_AddNewPoint
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_NavDebug_AllMap
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_GetMax
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_Absolute
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_SetSpiralDir
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_IsLaneCleaned
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_GetSpiralDir
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_GetNextLanePos
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_GetDir
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_ClearCleanCells
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_Mode
</UL>

<P><STRONG><a name="[214]"></a>Spot_SetClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spot.o(i.Spot_SetClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_Mode
</UL>

<P><STRONG><a name="[215]"></a>Spot_SetDir</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, spot.o(i.Spot_SetDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Spot_SetDir &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_Mode
</UL>

<P><STRONG><a name="[217]"></a>Spot_SetLaneIdx</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spot.o(i.Spot_SetLaneIdx))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_Mode
</UL>

<P><STRONG><a name="[14d]"></a>Spot_SetSpiralDir</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spot.o(i.Spot_SetSpiralDir))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_Mode
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_PathPlanning
</UL>

<P><STRONG><a name="[21b]"></a>Standby_Mode</STRONG> (Thumb, 330 bytes, Stack size 40 bytes, standby.o(i.Standby_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Standby_Mode &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcon_ResetRemoteCode
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcon_GetRemoteCode
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Bat_Red
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Bat_Green
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_GetCode
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_StoreMotorBaseline
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LED_On_Switch
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LED_On_Blink
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_SetMode
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_GetMode
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_GetStatus
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standby_WakeUpConfiguration
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_MainTask
</UL>

<P><STRONG><a name="[21c]"></a>Standby_WakeUpConfiguration</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, standby.o(i.Standby_WakeUpConfiguration))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standby_Mode
</UL>

<P><STRONG><a name="[146]"></a>Stuck_IsStucked</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, movement.o(i.Stuck_IsStucked))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
</UL>

<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, gd32f30x_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SysTick_Handler &rArr; osSystickHandler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSystickHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>SystemInit</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, system_gd32f30x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; system_clock_config
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(.text)
</UL>
<P><STRONG><a name="[220]"></a>SystemInitialize</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, sysinitialize.o(i.SystemInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SystemInitialize &rArr; NVIC_Configuration &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_Configuration
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Configuration
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Configuration
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Configuration
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_Configuration
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Configuration
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer7_Configuration
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer6_Configuration
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer5_Configuration
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1_Configuration
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0_Configuration
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systick_Configuration
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Configuration
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Configuration
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[252]"></a>System_GetAdc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sysinitialize.o(i.System_GetAdc))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SensorsTask
</UL>

<P><STRONG><a name="[a3]"></a>System_GetCurrentBaselineAdc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sysinitialize.o(i.System_GetCurrentBaselineAdc))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_Current_Filter
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SensorsTask
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charge_Process
</UL>

<P><STRONG><a name="[18b]"></a>System_GetRandomValue</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, movement.o(i.System_GetRandomValue))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HomeStraight_Mode
</UL>

<P><STRONG><a name="[25c]"></a>System_SetAverageCurrent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sysinitialize.o(i.System_SetAverageCurrent))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SensorsTask
</UL>

<P><STRONG><a name="[2de]"></a>System_SetCurrentBaselineAdc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sysinitialize.o(i.System_SetCurrentBaselineAdc))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[21d]"></a>System_StoreMotorBaseline</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, sysinitialize.o(i.System_StoreMotorBaseline))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = System_StoreMotorBaseline &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standby_Mode
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_MainTask
</UL>

<P><STRONG><a name="[222]"></a>Systick_Configuration</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sysinitialize.o(i.Systick_Configuration))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInitialize
</UL>

<P><STRONG><a name="[27]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 1012 bytes, Stack size 8 bytes, gd32f30x_it.o(i.TIMER1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_get
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_near_Flag
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_AddCapacity_Current
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIMER5_IRQHandler</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, gd32f30x_it.o(i.TIMER5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIMER5_IRQHandler &rArr; LED_Display &rArr; Mode_GetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_get
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcon_Timer
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Display
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIMER6_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, gd32f30x_it.o(i.TIMER6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER6_IRQHandler &rArr; Audio
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_get
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[234]"></a>TargetList_AddTarget</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, pathplanning.o(i.TargetList_AddTarget))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = TargetList_AddTarget &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetList_CreateList
</UL>

<P><STRONG><a name="[e3]"></a>TargetList_Clear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pathplanning.o(i.TargetList_Clear))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MapTouring
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_GyroFunction
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_BlockAllTargetPoints
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetList_CreateList
</UL>

<P><STRONG><a name="[1ec]"></a>TargetList_CreateList</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, pathplanning.o(i.TargetList_CreateList))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = TargetList_CreateList &rArr; TargetList_IsBlockTargetable &rArr; Map_GetCell &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetList_Clear
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetCell
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetList_IsBlockTargetable
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetList_AddTarget
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_WallFineWay
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_Next_V2
</UL>

<P><STRONG><a name="[236]"></a>TargetList_DeleteTarget</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, pathplanning.o(i.TargetList_DeleteTarget))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TargetList_DeleteTarget
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetList_ReadCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetList_Rearrange
</UL>

<P><STRONG><a name="[20c]"></a>TargetList_GetCurrentTarget</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, pathplanning.o(i.TargetList_GetCurrentTarget))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TargetList_GetCurrentTarget
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShortestPath_CreatePathPoint
</UL>

<P><STRONG><a name="[235]"></a>TargetList_IsBlockTargetable</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, pathplanning.o(i.TargetList_IsBlockTargetable))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = TargetList_IsBlockTargetable &rArr; Map_GetCell &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetCell
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetList_CreateList
</UL>

<P><STRONG><a name="[1da]"></a>TargetList_ReadCnt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pathplanning.o(i.TargetList_ReadCnt))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathLine_FindNextLines
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetList_Rearrange
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetList_ReadTarget
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetList_DeleteTarget
</UL>

<P><STRONG><a name="[1d7]"></a>TargetList_ReadTarget</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, pathplanning.o(i.TargetList_ReadTarget))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = TargetList_ReadTarget &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetList_ReadCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathLine_FindNextLines
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetList_Rearrange
</UL>

<P><STRONG><a name="[1ee]"></a>TargetList_Rearrange</STRONG> (Thumb, 242 bytes, Stack size 48 bytes, pathplanning.o(i.TargetList_Rearrange))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = TargetList_Rearrange &rArr; Map_Cell_Blocked &rArr; Map_GetCell &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRobotCell
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_Diff_int
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_Cell_Blocked
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetList_ReadTarget
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetList_ReadCnt
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetList_DeleteTarget
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_Next_V2
</UL>

<P><STRONG><a name="[1ed]"></a>TargetList_ShowAll</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pathplanning.o(i.TargetList_ShowAll))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_Next_V2
</UL>

<P><STRONG><a name="[1d9]"></a>TargetList_StoreCurrentTarget</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, pathplanning.o(i.TargetList_StoreCurrentTarget))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TargetList_StoreCurrentTarget
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathLine_FindNextLines
</UL>

<P><STRONG><a name="[4d]"></a>Task_CalculatePathTask</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, projecttask.o(i.Task_CalculatePathTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = Task_CalculatePathTask &rArr; Path_WallFineWay &rArr; ShortestPath_GeneratePath &rArr; PathLine_FindAllLines &rArr; PathLine_FindNextLines &rArr; PathLine_FindOneLine &rArr; Map_IsBlock_Access &rArr; Map_Cell_Blocked &rArr; Map_GetCell &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_WallFineWay
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRobotCell
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> projecttask.o(i.Task_CreateCalculatePathTask)
</UL>
<P><STRONG><a name="[4b]"></a>Task_ControlTask</STRONG> (Thumb, 452 bytes, Stack size 24 bytes, projecttask.o(i.Task_ControlTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Task_ControlTask &rArr; Wifi_Report_Map &rArr; AC_RealMap_ReadPoint &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_service
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Report_Map
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_TuneSpeedProcess
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SpeedAccelerationProcess
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vacuum_TuneProcess
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vacuum_GetSpeed
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserInterFace_IsLowPower
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_TunePower
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_GetState
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Wifi_Enable
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ACFlag
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_ResetCode
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_GetCode
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Process
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_Current_Filter
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_SetBattery
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charge_SetSwitch
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charge_Process
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_GetRightSpeed
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_GetLeftSpeed
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_DisableAll
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_SetMode
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_GetMode
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_SetCode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> projecttask.o(i.Task_CraeteControlTask)
</UL>
<P><STRONG><a name="[242]"></a>Task_CraeteControlTask</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, projecttask.o(i.Task_CraeteControlTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Task_CraeteControlTask &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[244]"></a>Task_CraeteSensorsTask</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, projecttask.o(i.Task_CraeteSensorsTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Task_CraeteSensorsTask &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[245]"></a>Task_CreateCalculatePathTask</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, projecttask.o(i.Task_CreateCalculatePathTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Task_CreateCalculatePathTask &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[246]"></a>Task_CreateMainTask</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, projecttask.o(i.Task_CreateMainTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Task_CreateMainTask &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4e]"></a>Task_MainTask</STRONG> (Thumb, 552 bytes, Stack size 0 bytes, main.o(i.Task_MainTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = Task_MainTask &rArr; Spot_Mode &rArr; CM_WallToMap &rArr; CM_WallFollowByCnt &rArr; CM_AbnormalHandler &rArr; ActList_Switch &rArr; Action_Head2Cource &rArr; CM_HeadToTarget &rArr; CM_HeadToCourse &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_protocol_init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_get_system_time
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Stop_Stream_trans
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Clean_Record_Report
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_All_Data_Init
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_Follow_Mode
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vacuum_ResetFailFlag
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_SetQuitCheckState
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Interface
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_ResetCurrentTime
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_StoreMotorBaseline
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standby_Mode
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_Mode
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speaker
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Wifi_Enable
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Mode
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBS_ResetTrigValue
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_DisableAll
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_SetMode
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_GetMode
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HomeStraight_Mode
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_SetCode
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_SetCMType
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MapTouring
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_Capacity_Reset
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_GyroFunction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> projecttask.o(i.Task_CreateMainTask)
</UL>
<P><STRONG><a name="[4c]"></a>Task_SensorsTask</STRONG> (Thumb, 818 bytes, Stack size 40 bytes, projecttask.o(i.Task_SensorsTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = Task_SensorsTask &rArr; CM_UpdatePosition &rArr; Map_GetRelativeXY &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Even_Report
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetRightCurrent
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetLeftCurrent
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_GetRightCurrentAdc
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_GetRightCount
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_GetLeftCurrentAdc
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_GetLeftCount
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_SetAverageAdcValue
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_GetXAdcValue
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_GetRightAdcValue
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_GetLeftAdcValue
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_GetDynamicState
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_DynamicProcess
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vacuum_SetCurrent
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vacuum_GetCurrentAdc
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_GetQuitCheckState
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnSlip_GetCheckState
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnSlip_DetectProcess
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_IncreaseCurrentTime
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_SetAverageCurrent
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_GetAdc
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Side_Brush_SetCurrent
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Side_Brush_GetCurrentAdc
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcon_RemoteKey
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBS_GetDynamicState
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBS_DynamicProcess
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Brush_SetCurrent
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Brush_GetCurrentAdc
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_GetPressKey
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cliff_GetDetectState
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cliff_DetectionProcess
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_UpdatePosition
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bumper_GetCheckState
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bumper_CheckProcess
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_SetVoltage
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_GetAdcValue
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_GetCurrentBaselineAdc
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_SetMode
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_GetStatus
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_GetAngle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> projecttask.o(i.Task_CraeteSensorsTask)
</UL>
<P><STRONG><a name="[250]"></a>Test_GyroFunction</STRONG> (Thumb, 1370 bytes, Stack size 72 bytes, main.o(i.Test_GyroFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = Test_GyroFunction &rArr; CM_MoveToMap &rArr; CM_MoveToPosition &rArr; CM_AbnormalHandler &rArr; ActList_Switch &rArr; Action_Head2Cource &rArr; CM_HeadToTarget &rArr; CM_HeadToCourse &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_Stop
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetTargetSpeed
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_ResetStep
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_GetRightSpeed
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_GetLeftStep
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_GetLeftSpeed
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetList_Clear
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LED_On_Switch
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LED_On_Blink
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathPoint_ClearAllPoints
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathList_Clear
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_WorkConfigure
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_DisableAll
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_Diff_int
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_Initialize
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM42688_Config
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heading_GetTargetAngle
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_GetAngle
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_Cmd
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToMap
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_HeadToCourse
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_GetVoltage
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Stop
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_SetMove
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_GetMove
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActList_Switch
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_MainTask
</UL>

<P><STRONG><a name="[290]"></a>Time_GetCurrentTime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, movement.o(i.Time_GetCurrentTime))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_Follow_Mode
</UL>

<P><STRONG><a name="[25a]"></a>Time_IncreaseCurrentTime</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, movement.o(i.Time_IncreaseCurrentTime))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SensorsTask
</UL>

<P><STRONG><a name="[15a]"></a>Time_ResetCurrentTime</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, movement.o(i.Time_ResetCurrentTime))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charge_Process
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_MainTask
</UL>

<P><STRONG><a name="[223]"></a>Timer0_Configuration</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, sysinitialize.o(i.Timer0_Configuration))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInitialize
</UL>

<P><STRONG><a name="[224]"></a>Timer1_Configuration</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, sysinitialize.o(i.Timer1_Configuration))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInitialize
</UL>

<P><STRONG><a name="[15c]"></a>Timer3_Configuration</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, sysinitialize.o(i.Timer3_Configuration))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charge_Process
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInitialize
</UL>

<P><STRONG><a name="[225]"></a>Timer5_Configuration</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sysinitialize.o(i.Timer5_Configuration))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInitialize
</UL>

<P><STRONG><a name="[226]"></a>Timer6_Configuration</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sysinitialize.o(i.Timer6_Configuration))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInitialize
</UL>

<P><STRONG><a name="[227]"></a>Timer7_Configuration</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, sysinitialize.o(i.Timer7_Configuration))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInitialize
</UL>

<P><STRONG><a name="[26a]"></a>TurnSlip_DetectProcess</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, wheel.o(i.TurnSlip_DetectProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TurnSlip_DetectProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_Diff_int
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_GetAngle
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_GetLeftMoveStep
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SensorsTask
</UL>

<P><STRONG><a name="[269]"></a>TurnSlip_GetCheckState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wheel.o(i.TurnSlip_GetCheckState))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SensorsTask
</UL>

<P><STRONG><a name="[108]"></a>TurnSlip_IsSlip</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wheel.o(i.TurnSlip_IsSlip))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
</UL>

<P><STRONG><a name="[88]"></a>TurnSlip_ResetSlipCnt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wheel.o(i.TurnSlip_ResetSlipCnt))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnSlip_SetCheckState
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Head2Cource
</UL>

<P><STRONG><a name="[85]"></a>TurnSlip_SetCheckState</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, wheel.o(i.TurnSlip_SetCheckState))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TurnSlip_SetCheckState
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnSlip_ResetSlipCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_MoveToPoint
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_MoveForward
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Turn
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_MoveBack
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Head2Cource
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Deceleration
</UL>

<P><STRONG><a name="[228]"></a>USART0_Configuration</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, usart.o(i.USART0_Configuration))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInitialize
</UL>

<P><STRONG><a name="[165]"></a>USART0_DMA_String</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, usart.o(i.USART0_DMA_String))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_DMA_Write_String
</UL>

<P><STRONG><a name="[30]"></a>USART0_IRQHandler</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, gd32f30x_it.o(i.USART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART0_IRQHandler &rArr; usart_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_get
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[229]"></a>USART1_Configuration</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, usart.o(i.USART1_Configuration))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInitialize
</UL>

<P><STRONG><a name="[31]"></a>USART1_IRQHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, gd32f30x_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART1_IRQHandler &rArr; usart_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Wifi_Enable
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_receive_input
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_get
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[308]"></a>USART1_Transmit_Byte</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usart.o(i.USART1_Transmit_Byte))
<BR><BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_transmit_output
</UL>

<P><STRONG><a name="[22a]"></a>USART2_Configuration</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, usart.o(i.USART2_Configuration))
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInitialize
</UL>

<P><STRONG><a name="[32]"></a>USART2_IRQHandler</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, gd32f30x_it.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART2_IRQHandler &rArr; Gyro_ReceiveCharacter &rArr; Gyro_ParseMsg &rArr; Chat2Float
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_get
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_clear
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_ReceiveCharacter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[271]"></a>USART3_CreateTask</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, usart.o(i.USART3_CreateTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = USART3_CreateTask &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4a]"></a>USART3_PrintStringByLength</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, usart.o(i.USART3_PrintStringByLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USART3_PrintStringByLength &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
</UL>
<BR>[Address Reference Count : 2]<UL><LI> debug.o(i.PC_NavDebug)
<LI> debug.o(i.mPC_NavDebug)
</UL>
<P><STRONG><a name="[4f]"></a>USART3_PrintTask</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, usart.o(i.USART3_PrintTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USART3_PrintTask &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_DMA_Write_String
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(i.USART3_CreateTask)
</UL>
<P><STRONG><a name="[167]"></a>USARTMY_Transmit_Byte</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usart.o(i.USARTMY_Transmit_Byte))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Write_Byte
</UL>

<P><STRONG><a name="[1cd]"></a>USART_SendNavData</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, debug.o(i.USART_SendNavData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_SendNavData
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_NavDebug
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mPC_NavDebug
</UL>

<P><STRONG><a name="[1cc]"></a>UpgradeNavData_simple</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, debug.o(i.UpgradeNavData_simple))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UpgradeNavData_simple
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_NavDebug
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mPC_NavDebug
</UL>

<P><STRONG><a name="[6]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f30x_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f30x_hd.o(RESET)
</UL>
<P><STRONG><a name="[273]"></a>UserInterFace_BeginToWork</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, userinterface.o(i.UserInterFace_BeginToWork))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = UserInterFace_BeginToWork &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LED1_On_Blink
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcon_ResetRemoteCode
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bumper_ResetErrorCnt
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_SetCheckState
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Interface
</UL>

<P><STRONG><a name="[23e]"></a>UserInterFace_IsLowPower</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, userinterface.o(i.UserInterFace_IsLowPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UserInterFace_IsLowPower
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_GetVoltage
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ControlTask
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Interface
</UL>

<P><STRONG><a name="[275]"></a>UserInterFace_IsRobotPickedUp</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, userinterface.o(i.UserInterFace_IsRobotPickedUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UserInterFace_IsRobotPickedUp
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cliff_GetInstantStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Interface
</UL>

<P><STRONG><a name="[27b]"></a>UserInterFace_IsWorkMode</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, userinterface.o(i.UserInterFace_IsWorkMode))
<BR><BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Interface
</UL>

<P><STRONG><a name="[277]"></a>UserInterFace_RemoteToMode</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, userinterface.o(i.UserInterFace_RemoteToMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UserInterFace_RemoteToMode &rArr; Mode_SetModeAndSelection &rArr; Mode_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcon_ResetRemoteCode
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_SetModeAndSelection
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Interface
</UL>

<P><STRONG><a name="[263]"></a>User_GetQuitCheckState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, movement.o(i.User_GetQuitCheckState))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SensorsTask
</UL>

<P><STRONG><a name="[24a]"></a>User_Interface</STRONG> (Thumb, 1228 bytes, Stack size 48 bytes, userinterface.o(i.User_Interface))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = User_Interface &rArr; UserInterFace_BeginToWork &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_set_wifi_mode
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Set_Mode_Flag
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Mode_GetMode
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Get_Mode_Flag
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPK_Report_Error
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcon_ResetStatus
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcon_ResetRemoteCode
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcon_GetRemoteCode
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_ResetStatus
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Bat_Red
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Bat_Green
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bumper_ResetErrorCnt
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bumper_GetTrigStatus
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_SetCheckState
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserInterFace_RemoteToMode
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserInterFace_IsWorkMode
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserInterFace_IsRobotPickedUp
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserInterFace_BeginToWork
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserInterFace_IsLowPower
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_ResetCode
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_GetCode
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_SetBattery
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speaker
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LED_On_Switch
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LED_On_Blink
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_EnableAll
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_DisableAll
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_SetMode
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_GetMode
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_GetStatus
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_SetCode
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_GetVoltage
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_MainTask
</UL>

<P><STRONG><a name="[159]"></a>User_SetQuitCheckState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, movement.o(i.User_SetQuitCheckState))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charge_Process
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_MainTask
</UL>

<P><STRONG><a name="[ba]"></a>Vacuum_GetCurrent</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bldc.o(i.Vacuum_GetCurrent))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_AbnormalHandler
</UL>

<P><STRONG><a name="[255]"></a>Vacuum_GetCurrentAdc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bldc.o(i.Vacuum_GetCurrentAdc))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SensorsTask
</UL>

<P><STRONG><a name="[238]"></a>Vacuum_GetSpeed</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bldc.o(i.Vacuum_GetSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ControlTask
</UL>

<P><STRONG><a name="[af]"></a>Vacuum_ResetFailFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bldc.o(i.Vacuum_ResetFailFlag))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_MainTask
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_AbnormalHandler
</UL>

<P><STRONG><a name="[25f]"></a>Vacuum_SetCurrent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bldc.o(i.Vacuum_SetCurrent))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SensorsTask
</UL>

<P><STRONG><a name="[27d]"></a>Vacuum_SetFailFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bldc.o(i.Vacuum_SetFailFlag))
<BR><BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vacuum_TuneProcess
</UL>

<P><STRONG><a name="[1c3]"></a>Vacuum_SetSpeed</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, bldc.o(i.Vacuum_SetSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vacuum_TurnOff
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_SetPower
</UL>

<P><STRONG><a name="[239]"></a>Vacuum_TuneProcess</STRONG> (Thumb, 278 bytes, Stack size 4 bytes, bldc.o(i.Vacuum_TuneProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Vacuum_TuneProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_VacMode
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vacuum_SetFailFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ControlTask
</UL>

<P><STRONG><a name="[ac]"></a>Vacuum_TurnOff</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, bldc.o(i.Vacuum_TurnOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Vacuum_TurnOff
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vacuum_SetSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_DisableAll
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_AbnormalHandler
</UL>

<P><STRONG><a name="[27e]"></a>W25QXX_Erase_Sector</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, w25q16.o(i.W25QXX_Erase_Sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = W25QXX_Erase_Sector &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Wait_Busy
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write
</UL>

<P><STRONG><a name="[180]"></a>W25QXX_Read</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, w25q16.o(i.W25QXX_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = W25QXX_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Upgrade_Flag
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write
</UL>

<P><STRONG><a name="[281]"></a>W25QXX_ReadSR</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, w25q16.o(i.W25QXX_ReadSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Wait_Busy
</UL>

<P><STRONG><a name="[280]"></a>W25QXX_Wait_Busy</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, w25q16.o(i.W25QXX_Wait_Busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadSR
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Page
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Sector
</UL>

<P><STRONG><a name="[20a]"></a>W25QXX_Write</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, w25q16.o(i.W25QXX_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_NoCheck
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Sector
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Upgrade_Flag
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_firm_update_handle
</UL>

<P><STRONG><a name="[27f]"></a>W25QXX_Write_Enable</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, w25q16.o(i.W25QXX_Write_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = W25QXX_Write_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Page
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Erase_Sector
</UL>

<P><STRONG><a name="[282]"></a>W25QXX_Write_NoCheck</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, w25q16.o(i.W25QXX_Write_NoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Page
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write
</UL>

<P><STRONG><a name="[283]"></a>W25QXX_Write_Page</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, w25q16.o(i.W25QXX_Write_Page))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Wait_Busy
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_NoCheck
</UL>

<P><STRONG><a name="[a9]"></a>WHEEL_DISABLE</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, wheel.o(i.WHEEL_DISABLE))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_DisableAll
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_AbnormalHandler
</UL>

<P><STRONG><a name="[296]"></a>WallFollow_CheckBigAngleWall</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, wallfollow.o(i.WallFollow_CheckBigAngleWall))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_Follow_Mode
</UL>

<P><STRONG><a name="[295]"></a>WallFollow_CheckStraightWall</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, wallfollow.o(i.WallFollow_CheckStraightWall))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_Follow_Mode
</UL>

<P><STRONG><a name="[299]"></a>WallFollow_GetDistance</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wallfollow.o(i.WallFollow_GetDistance))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_Follow_Mode
</UL>

<P><STRONG><a name="[297]"></a>WallFollow_GetLeftwheelStep</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wheel.o(i.WallFollow_GetLeftwheelStep))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_Follow_Mode
</UL>

<P><STRONG><a name="[298]"></a>WallFollow_GetRightwheelStep</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wheel.o(i.WallFollow_GetRightwheelStep))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_Follow_Mode
</UL>

<P><STRONG><a name="[29b]"></a>WallFollow_GetTime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wallfollow.o(i.WallFollow_GetTime))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_Follow_Mode
</UL>

<P><STRONG><a name="[292]"></a>WallFollow_GetWallAccelerate</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wheel.o(i.WallFollow_GetWallAccelerate))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_Follow_Mode
</UL>

<P><STRONG><a name="[29a]"></a>WallFollow_ResetCells</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, wallfollow.o(i.WallFollow_ResetCells))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_Follow_Mode
</UL>

<P><STRONG><a name="[28b]"></a>WallFollow_ResetCircleFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wallfollow.o(i.WallFollow_ResetCircleFlag))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_Follow_Mode
</UL>

<P><STRONG><a name="[284]"></a>WallFollow_ResetRightBaseLine</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, wallfollow.o(i.WallFollow_ResetRightBaseLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WallFollow_ResetRightBaseLine
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_SetRightBaseline
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_Follow_Mode
</UL>

<P><STRONG><a name="[28d]"></a>WallFollow_ResetSpinningTime</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wallfollow.o(i.WallFollow_ResetSpinningTime))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_Follow_Mode
</UL>

<P><STRONG><a name="[291]"></a>WallFollow_ResetWallAccelerate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wheel.o(i.WallFollow_ResetWallAccelerate))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_Follow_Mode
</UL>

<P><STRONG><a name="[28c]"></a>WallFollow_ResetWheelStep</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wheel.o(i.WallFollow_ResetWheelStep))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_Follow_Mode
</UL>

<P><STRONG><a name="[28e]"></a>WallFollow_SetDistance</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wallfollow.o(i.WallFollow_SetDistance))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_Follow_Mode
</UL>

<P><STRONG><a name="[28f]"></a>WallFollow_SetTime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wallfollow.o(i.WallFollow_SetTime))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_Follow_Mode
</UL>

<P><STRONG><a name="[df]"></a>Wall_AdjustBaseline</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, obscliff.o(i.Wall_AdjustBaseline))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Wall_AdjustBaseline
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_GetXAdcValue
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_GetRightAdcValue
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_GetLeftAdcValue
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_SetRightBaseline
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_SetXBaseline
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_SetLeftBaseline
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_Follow_Mode
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_Mode
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MapTouring
</UL>

<P><STRONG><a name="[265]"></a>Wall_DynamicProcess</STRONG> (Thumb, 366 bytes, Stack size 8 bytes, obscliff.o(i.Wall_DynamicProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Wall_DynamicProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_GetXAdcValue
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_GetRightAdcValue
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_GetLeftAdcValue
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_Diff_int
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_SetRightBaseline
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_GetRightBaseline
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_SetXBaseline
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_SetLeftBaseline
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_GetXBaseline
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_GetLeftBaseline
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SensorsTask
</UL>

<P><STRONG><a name="[24f]"></a>Wall_Follow_Mode</STRONG> (Thumb, 3294 bytes, Stack size 144 bytes, wallfollow.o(i.Wall_Follow_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = Wall_Follow_Mode &rArr; CM_AbnormalHandler &rArr; ActList_Switch &rArr; Action_Head2Cource &rArr; CM_HeadToTarget &rArr; CM_HeadToCourse &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetTargetStep
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_GetRightStep
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_GetStatus
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cliff_GetDetectiontProcess_Result
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_WaitForMoveEnded
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActList_Clear
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActList_Add
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcon_ResetStatus
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcon_ResetRemoteCode
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rcon_GetRemoteCode
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_ResetStatus
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bumper_ResetErrorCnt
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bumper_GetTrigStatus
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRobotCell
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_GetCode
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_Stop
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetTargetSpeed
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_GetRightSpeed
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_GetLeftStep
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_GetLeftSpeed
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speaker
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBS_ResetTrigValue
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_WorkConfigure
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_SetMode
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_GetMode
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_Initialize
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ICM42688_Config
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_GetAngle
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_Cmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_SetCode
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_SetMove
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_GetMove
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActList_Switch
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetLeftSpeed
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetLeftDir
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_GetLeftDir
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_SetDynamicState
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_GetRightBaseline
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_GetRightAverageAdcValue
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WallFollow_ResetWheelStep
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WallFollow_ResetWallAccelerate
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WallFollow_GetWallAccelerate
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WallFollow_GetRightwheelStep
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WallFollow_GetLeftwheelStep
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_GetCurrentTime
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBS_L_F_Near
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBS_IsNear
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBS_GetTrigStatus
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_RoundAngle
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_Calibration_Cmd
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_GetMobilityIgnoreFlag
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_AbnormalHandler
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_MoveForward
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActList_BackToStop
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WallFollow_SetTime
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WallFollow_SetDistance
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WallFollow_ResetSpinningTime
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WallFollow_ResetRightBaseLine
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WallFollow_ResetCircleFlag
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WallFollow_ResetCells
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WallFollow_GetTime
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WallFollow_GetDistance
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WallFollow_CheckStraightWall
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WallFollow_CheckBigAngleWall
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_AdjustBaseline
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gryo_GetUpdateFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_MainTask
</UL>

<P><STRONG><a name="[264]"></a>Wall_GetDynamicState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, obscliff.o(i.Wall_GetDynamicState))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SensorsTask
</UL>

<P><STRONG><a name="[258]"></a>Wall_GetLeftAdcValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, obscliff.o(i.Wall_GetLeftAdcValue))
<BR><BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_DynamicProcess
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SensorsTask
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_AdjustBaseline
</UL>

<P><STRONG><a name="[149]"></a>Wall_GetLeftAverageAdcValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, obscliff.o(i.Wall_GetLeftAverageAdcValue))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBS_L_F_Near
</UL>

<P><STRONG><a name="[289]"></a>Wall_GetLeftBaseline</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, obscliff.o(i.Wall_GetLeftBaseline))
<BR><BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_DynamicProcess
</UL>

<P><STRONG><a name="[e1]"></a>Wall_GetRightAdcValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, obscliff.o(i.Wall_GetRightAdcValue))
<BR><BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_DynamicProcess
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SensorsTask
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MapTouring
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_AdjustBaseline
</UL>

<P><STRONG><a name="[147]"></a>Wall_GetRightAverageAdcValue</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, obscliff.o(i.Wall_GetRightAverageAdcValue))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_Follow_Mode
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBS_R_F_Near
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
</UL>

<P><STRONG><a name="[288]"></a>Wall_GetRightBaseline</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, obscliff.o(i.Wall_GetRightBaseline))
<BR><BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_DynamicProcess
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_Follow_Mode
</UL>

<P><STRONG><a name="[259]"></a>Wall_GetXAdcValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, obscliff.o(i.Wall_GetXAdcValue))
<BR><BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_DynamicProcess
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SensorsTask
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_AdjustBaseline
</UL>

<P><STRONG><a name="[28a]"></a>Wall_GetXBaseline</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, obscliff.o(i.Wall_GetXBaseline))
<BR><BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_DynamicProcess
</UL>

<P><STRONG><a name="[262]"></a>Wall_SetAverageAdcValue</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, obscliff.o(i.Wall_SetAverageAdcValue))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SensorsTask
</UL>

<P><STRONG><a name="[92]"></a>Wall_SetDynamicState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, obscliff.o(i.Wall_SetDynamicState))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_Stop
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_Follow_Mode
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_MoveToPoint
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
</UL>

<P><STRONG><a name="[286]"></a>Wall_SetLeftBaseline</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, obscliff.o(i.Wall_SetLeftBaseline))
<BR><BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_DynamicProcess
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_AdjustBaseline
</UL>

<P><STRONG><a name="[285]"></a>Wall_SetRightBaseline</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, obscliff.o(i.Wall_SetRightBaseline))
<BR><BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_DynamicProcess
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WallFollow_ResetRightBaseLine
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_AdjustBaseline
</UL>

<P><STRONG><a name="[287]"></a>Wall_SetXBaseline</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, obscliff.o(i.Wall_SetXBaseline))
<BR><BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_DynamicProcess
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_AdjustBaseline
</UL>

<P><STRONG><a name="[11a]"></a>Wheel_Forward_PidProcess</STRONG> (Thumb, 582 bytes, Stack size 72 bytes, wheel.o(i.Wheel_Forward_PidProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = Wheel_Forward_PidProcess &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_GetRightSpeed
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_GetLeftSpeed
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetDir
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_GetDir
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_LimitingValue
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_Abs_int
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
</UL>

<P><STRONG><a name="[125]"></a>Wheel_GetDir</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wheel.o(i.Wheel_GetDir))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_Forward_PidProcess
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_Move_Back
</UL>

<P><STRONG><a name="[12e]"></a>Wheel_GetLeftCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wheel.o(i.Wheel_GetLeftCount))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_UpdatePosition
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SensorsTask
</UL>

<P><STRONG><a name="[b6]"></a>Wheel_GetLeftCurrent</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wheel.o(i.Wheel_GetLeftCurrent))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_AbnormalHandler
</UL>

<P><STRONG><a name="[256]"></a>Wheel_GetLeftCurrentAdc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wheel.o(i.Wheel_GetLeftCurrentAdc))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SensorsTask
</UL>

<P><STRONG><a name="[294]"></a>Wheel_GetLeftDir</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wheel.o(i.Wheel_GetLeftDir))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_Follow_Mode
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetDir
</UL>

<P><STRONG><a name="[190]"></a>Wheel_GetLeftMoveStep</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wheel.o(i.Wheel_GetLeftMoveStep))
<BR><BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnSlip_DetectProcess
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HomeStraight_Mode
</UL>

<P><STRONG><a name="[b3]"></a>Wheel_GetLeftSpeed</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wheel.o(i.Wheel_GetLeftSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SpeedAccelerationProcess
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ControlTask
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_Follow_Mode
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Mode
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HomeStraight_Mode
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_GyroFunction
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_Forward_PidProcess
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_AbnormalHandler
</UL>

<P><STRONG><a name="[97]"></a>Wheel_GetLeftStep</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wheel.o(i.Wheel_GetLeftStep))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_WaitForMoveEnded
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SpeedAccelerationProcess
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_Follow_Mode
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Mode
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HomeStraight_Mode
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_GyroFunction
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_AbnormalHandler
</UL>

<P><STRONG><a name="[7b]"></a>Wheel_GetLeftTargetSpeed</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wheel.o(i.Wheel_GetLeftTargetSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SpeedAccelerationProcess
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HomeStraight_Mode
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActList_Switch
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
</UL>

<P><STRONG><a name="[98]"></a>Wheel_GetLeftTargetStep</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wheel.o(i.Wheel_GetLeftTargetStep))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_WaitForMoveEnded
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SpeedAccelerationProcess
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_Move_Back
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_AbnormalHandler
</UL>

<P><STRONG><a name="[12d]"></a>Wheel_GetRightCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wheel.o(i.Wheel_GetRightCount))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_UpdatePosition
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SensorsTask
</UL>

<P><STRONG><a name="[b7]"></a>Wheel_GetRightCurrent</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wheel.o(i.Wheel_GetRightCurrent))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_AbnormalHandler
</UL>

<P><STRONG><a name="[257]"></a>Wheel_GetRightCurrentAdc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wheel.o(i.Wheel_GetRightCurrentAdc))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SensorsTask
</UL>

<P><STRONG><a name="[29d]"></a>Wheel_GetRightDir</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wheel.o(i.Wheel_GetRightDir))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetDir
</UL>

<P><STRONG><a name="[b4]"></a>Wheel_GetRightSpeed</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wheel.o(i.Wheel_GetRightSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SpeedAccelerationProcess
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ControlTask
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_Follow_Mode
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Mode
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HomeStraight_Mode
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_GyroFunction
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_Forward_PidProcess
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_AbnormalHandler
</UL>

<P><STRONG><a name="[99]"></a>Wheel_GetRightStep</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wheel.o(i.Wheel_GetRightStep))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_WaitForMoveEnded
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SpeedAccelerationProcess
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_Follow_Mode
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Mode
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HomeStraight_Mode
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_AbnormalHandler
</UL>

<P><STRONG><a name="[7a]"></a>Wheel_GetRightTargetSpeed</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wheel.o(i.Wheel_GetRightTargetSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SpeedAccelerationProcess
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HomeStraight_Mode
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActList_Switch
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
</UL>

<P><STRONG><a name="[9a]"></a>Wheel_GetRightTargetStep</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wheel.o(i.Wheel_GetRightTargetStep))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_WaitForMoveEnded
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SpeedAccelerationProcess
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_Move_Back
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_AbnormalHandler
</UL>

<P><STRONG><a name="[123]"></a>Wheel_LeftStepReached</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, wheel.o(i.Wheel_LeftStepReached))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_Move_Back
</UL>

<P><STRONG><a name="[18f]"></a>Wheel_ResetMoveStep</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wheel.o(i.Wheel_ResetMoveStep))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HomeStraight_Mode
</UL>

<P><STRONG><a name="[ae]"></a>Wheel_ResetSlowCnt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wheel.o(i.Wheel_ResetSlowCnt))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_WorkConfigure
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_HomeConfigure
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_AbnormalHandler
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_SpotConfigure
</UL>

<P><STRONG><a name="[84]"></a>Wheel_ResetStep</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wheel.o(i.Wheel_ResetStep))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_HeadToCourse
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Stop
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_GyroFunction
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_MoveToPoint
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_Move_Back
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_MoveForward
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Turn
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_MoveBack
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Head2Cource
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Deceleration
</UL>

<P><STRONG><a name="[124]"></a>Wheel_RightStepReached</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, wheel.o(i.Wheel_RightStepReached))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_Move_Back
</UL>

<P><STRONG><a name="[12f]"></a>Wheel_SetCount</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wheel.o(i.Wheel_SetCount))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_UpdatePosition
</UL>

<P><STRONG><a name="[8c]"></a>Wheel_SetDir</STRONG> (Thumb, 200 bytes, Stack size 4 bytes, wheel.o(i.Wheel_SetDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Wheel_SetDir &rArr; Wheel_SetLeftDir
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetLeftSpeed
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetLeftDir
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_GetLeftDir
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetRightSpeed
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetRightDir
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_GetRightDir
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_HeadToCourse
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_Forward_PidProcess
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_MoveToPoint
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_Move_Turn
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_Move_Back
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_MoveForward
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Turn
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_MoveBack
</UL>

<P><STRONG><a name="[260]"></a>Wheel_SetLeftCurrent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wheel.o(i.Wheel_SetLeftCurrent))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SensorsTask
</UL>

<P><STRONG><a name="[293]"></a>Wheel_SetLeftDir</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, wheel.o(i.Wheel_SetLeftDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Wheel_SetLeftDir
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LW_DIR_FORWARD
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LW_DIR_BACKWARD
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_Follow_Mode
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetDir
</UL>

<P><STRONG><a name="[78]"></a>Wheel_SetLeftSpeed</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wheel.o(i.Wheel_SetLeftSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SpeedAccelerationProcess
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_Follow_Mode
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActList_Switch
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetDir
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetSpeed
</UL>

<P><STRONG><a name="[13e]"></a>Wheel_SetLeftTargetSpeed</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wheel.o(i.Wheel_SetLeftTargetSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SpeedAccelerationProcess
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetTargetSpeed
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
</UL>

<P><STRONG><a name="[8a]"></a>Wheel_SetLeftTargetStep</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wheel.o(i.Wheel_SetLeftTargetStep))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_HeadToCourse
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_MoveToPoint
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Turn
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_MoveBack
</UL>

<P><STRONG><a name="[261]"></a>Wheel_SetRightCurrent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wheel.o(i.Wheel_SetRightCurrent))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SensorsTask
</UL>

<P><STRONG><a name="[29e]"></a>Wheel_SetRightDir</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, wheel.o(i.Wheel_SetRightDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Wheel_SetRightDir
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RW_DIR_FORWARD
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RW_DIR_BACKWARD
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetDir
</UL>

<P><STRONG><a name="[79]"></a>Wheel_SetRightSpeed</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wheel.o(i.Wheel_SetRightSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SpeedAccelerationProcess
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActList_Switch
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetDir
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetSpeed
</UL>

<P><STRONG><a name="[13d]"></a>Wheel_SetRightTargetSpeed</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wheel.o(i.Wheel_SetRightTargetSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SpeedAccelerationProcess
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetTargetSpeed
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
</UL>

<P><STRONG><a name="[89]"></a>Wheel_SetRightTargetStep</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wheel.o(i.Wheel_SetRightTargetStep))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_HeadToCourse
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_MoveToPoint
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Turn
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_MoveBack
</UL>

<P><STRONG><a name="[8b]"></a>Wheel_SetSpeed</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, wheel.o(i.Wheel_SetSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Wheel_SetSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetLeftSpeed
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetRightSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_Stop
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MapTouring
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_Forward_PidProcess
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speed_Stop
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_Drying
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_MoveBack
</UL>

<P><STRONG><a name="[83]"></a>Wheel_SetTargetSpeed</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, wheel.o(i.Wheel_SetTargetSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Wheel_SetTargetSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetRightTargetSpeed
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetLeftTargetSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_Stop
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_Follow_Mode
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HomeStraight_Mode
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MapTouring
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_HeadToCourse
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_GyroFunction
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speed_Stop
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_MoveToPoint
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_Move_Turn
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_Move_Back
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_Drying
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adjust_Home_Path
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_MoveForward
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Turn
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_MoveBack
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Deceleration
</UL>

<P><STRONG><a name="[8e]"></a>Wheel_SetTargetStep</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wheel.o(i.Wheel_SetTargetStep))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_Follow_Mode
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Mode
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HomeStraight_Mode
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_Move_Back
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_MoveForward
</UL>

<P><STRONG><a name="[23c]"></a>Wheel_SpeedAccelerationProcess</STRONG> (Thumb, 320 bytes, Stack size 8 bytes, wheel.o(i.Wheel_SpeedAccelerationProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Wheel_SpeedAccelerationProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_GetRightStep
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_GetRightSpeed
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_GetLeftStep
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_GetLeftSpeed
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_GetMove
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_GetRightTargetStep
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_GetLeftTargetStep
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_GetRightTargetSpeed
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_GetLeftTargetSpeed
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetLeftSpeed
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetRightTargetSpeed
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetLeftTargetSpeed
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetRightSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ControlTask
</UL>

<P><STRONG><a name="[80]"></a>Wheel_Stop</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, wheel.o(i.Wheel_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Wheel_Stop &rArr; Wheel_SetTargetSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActList_Clear
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetTargetSpeed
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_SetMove
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_SetDynamicState
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_SetSpeed
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBS_SetDynamicState
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_Follow_Mode
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Mode
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_DisableAll
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HomeStraight_Mode
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Stop
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActList_Switch
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_GyroFunction
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_AbnormalHandler
</UL>

<P><STRONG><a name="[23b]"></a>Wheel_TuneSpeedProcess</STRONG> (Thumb, 496 bytes, Stack size 8 bytes, wheel.o(i.Wheel_TuneSpeedProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Wheel_TuneSpeedProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ControlTask
</UL>

<P><STRONG><a name="[248]"></a>Wifi_All_Data_Init</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, sysinitialize.o(i.Wifi_All_Data_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Wifi_All_Data_Init &rArr; Mode_GetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_GetMode
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_VacMode
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_Get_CapacityLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_MainTask
</UL>

<P><STRONG><a name="[24e]"></a>Wifi_Clean_Record_Report</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, sysinitialize.o(i.Wifi_Clean_Record_Report))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Wifi_Clean_Record_Report &rArr; mcu_dp_string_update &rArr; set_wifi_uart_buffer &rArr; my_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_string_update
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_MainTask
</UL>

<P><STRONG><a name="[268]"></a>Wifi_Even_Report</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, sysinitialize.o(i.Wifi_Even_Report))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Wifi_Even_Report &rArr; mcu_dp_value_update &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Get_Mode_Flag
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_GetMode
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_value_update
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_enum_update
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_Get_CapacityLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SensorsTask
</UL>

<P><STRONG><a name="[1fd]"></a>Wifi_GetRemoteCode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rcon.o(i.Wifi_GetRemoteCode))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Mode
</UL>

<P><STRONG><a name="[1bd]"></a>Wifi_Get_Mode_Flag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, movement.o(i.Wifi_Get_Mode_Flag))
<BR><BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Even_Report
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Interface
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_SetMode
</UL>

<P><STRONG><a name="[27a]"></a>Wifi_Mode_GetMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, movement.o(i.Wifi_Mode_GetMode))
<BR><BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Interface
</UL>

<P><STRONG><a name="[2a7]"></a>Wifi_Mode_SetMode</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, movement.o(i.Wifi_Mode_SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Wifi_Mode_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Set_Mode_Flag
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_mode_handle
</UL>

<P><STRONG><a name="[1ad]"></a>Wifi_Open_Stream_trans</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sysinitialize.o(i.Wifi_Open_Stream_trans))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Wifi_Open_Stream_trans &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_Initialize
</UL>

<P><STRONG><a name="[2a9]"></a>Wifi_Package_Choose</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, protocol.o(i.Wifi_Package_Choose))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Wifi_Package_Choose &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_frame
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wifi_uart_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
</UL>

<P><STRONG><a name="[2ab]"></a>Wifi_Rece_Package_Report</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, protocol.o(i.Wifi_Rece_Package_Report))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Wifi_Rece_Package_Report &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
</UL>

<P><STRONG><a name="[23f]"></a>Wifi_Report_Map</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, sysinitialize.o(i.Wifi_Report_Map))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Wifi_Report_Map &rArr; AC_RealMap_ReadPoint &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_GetMode
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_SetFlag
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_trans
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_RealMap_ReadPoint
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_RealMap_GetCnt
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ControlTask
</UL>

<P><STRONG><a name="[2cf]"></a>Wifi_SetRemoteCode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rcon.o(i.Wifi_SetRemoteCode))
<BR><BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_directioncontrol_handle
</UL>

<P><STRONG><a name="[279]"></a>Wifi_Set_Mode_Flag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, movement.o(i.Wifi_Set_Mode_Flag))
<BR><BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Interface
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Mode_SetMode
</UL>

<P><STRONG><a name="[1ae]"></a>Wifi_Start_Stream_trans</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, sysinitialize.o(i.Wifi_Start_Stream_trans))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Wifi_Start_Stream_trans &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_frame
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wifi_uart_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_Initialize
</UL>

<P><STRONG><a name="[24d]"></a>Wifi_Stop_Stream_trans</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, sysinitialize.o(i.Wifi_Stop_Stream_trans))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Wifi_Stop_Stream_trans &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_frame
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wifi_uart_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_MainTask
</UL>

<P><STRONG><a name="[1ac]"></a>Wifi_Update_MapReport_Init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, sysinitialize.o(i.Wifi_Update_MapReport_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Wifi_Update_MapReport_Init &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_frame
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wifi_uart_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_Initialize
</UL>

<P><STRONG><a name="[2b1]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[1b8]"></a>__hardfp_atan</STRONG> (Thumb, 622 bytes, Stack size 48 bytes, atan.o(i.__hardfp_atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_Course2Dest
</UL>

<P><STRONG><a name="[132]"></a>__hardfp_cos</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, cos.o(i.__hardfp_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_UpdatePosition
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRelativeY
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRelativeXY
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRelativeX
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRelativeByCell
</UL>

<P><STRONG><a name="[1a9]"></a>__hardfp_round</STRONG> (Thumb, 194 bytes, Stack size 64 bytes, round.o(i.__hardfp_round))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __hardfp_round &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_GetRobotDirection
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_TwoCell_Dis
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRobotCountY
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRobotCountX
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_Course2Dest
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRobotCount
</UL>

<P><STRONG><a name="[131]"></a>__hardfp_sin</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, sin.o(i.__hardfp_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_UpdatePosition
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRelativeY
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRelativeXY
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRelativeX
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetRelativeByCell
</UL>

<P><STRONG><a name="[1ba]"></a>__hardfp_sqrt</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, sqrt.o(i.__hardfp_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Math_TwoCell_Dis
</UL>

<P><STRONG><a name="[212]"></a>__hardfp_tan</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, tan.o(i.__hardfp_tan))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = __hardfp_tan &rArr; __kernel_tan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_IsLaneCleaned
</UL>

<P><STRONG><a name="[2b7]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 938 bytes, Stack size 120 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[2b9]"></a>__kernel_cos</STRONG> (Thumb, 322 bytes, Stack size 64 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[2b4]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[2b8]"></a>__kernel_sin</STRONG> (Thumb, 280 bytes, Stack size 72 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[2ba]"></a>__kernel_tan</STRONG> (Thumb, 764 bytes, Stack size 128 bytes, tan_i.o(i.__kernel_tan))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = __kernel_tan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
</UL>

<P><STRONG><a name="[2b0]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[2b6]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[2b2]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[335]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[336]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[337]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[2b5]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[2bb]"></a>all_data_update</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, protocol.o(i.all_data_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = all_data_update &rArr; mcu_dp_string_update &rArr; set_wifi_uart_buffer &rArr; my_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_value_update
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_string_update
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_fault_update
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_enum_update
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_bool_update
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
</UL>

<P><STRONG><a name="[2e1]"></a>byte_to_int</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mcu_api.o(i.byte_to_int))
<BR><BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_get_dp_download_value
</UL>

<P><STRONG><a name="[30f]"></a>configureTimerForRunTimeStats</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, freertos.o(i.configureTimerForRunTimeStats))
<BR><BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[9f]"></a>dac_data_set</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, gd32f30x_dac.o(i.dac_data_set))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Audio
</UL>

<P><STRONG><a name="[15e]"></a>dac_deinit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gd32f30x_dac.o(i.dac_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dac_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Configuration
</UL>

<P><STRONG><a name="[162]"></a>dac_enable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gd32f30x_dac.o(i.dac_enable))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Configuration
</UL>

<P><STRONG><a name="[161]"></a>dac_output_buffer_enable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gd32f30x_dac.o(i.dac_output_buffer_enable))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Configuration
</UL>

<P><STRONG><a name="[15f]"></a>dac_trigger_disable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gd32f30x_dac.o(i.dac_trigger_disable))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Configuration
</UL>

<P><STRONG><a name="[160]"></a>dac_wave_mode_config</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, gd32f30x_dac.o(i.dac_wave_mode_config))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Configuration
</UL>

<P><STRONG><a name="[2c0]"></a>data_handle</STRONG> (Thumb, 632 bytes, Stack size 48 bytes, system.o(i.data_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = data_handle &rArr; data_point_handle &rArr; dp_download_handle &rArr; dp_download_volume_handle &rArr; mcu_dp_value_update &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Erase
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;product_info_update
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heat_beat_check
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mcu_wifi_mode
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_point_handle
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_test_result
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_write_rtctime
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_get_greentime
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_firm_update_handle
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wifi_status
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_data_update
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Rece_Package_Report
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Package_Choose
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_service
</UL>

<P><STRONG><a name="[17e]"></a>delay</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sysinitialize.o(i.delay))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBaseLineADCV
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_firm_update_handle
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_Reset_Cmd
</UL>

<P><STRONG><a name="[2cc]"></a>dp_download_handle</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, protocol.o(i.dp_download_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = dp_download_handle &rArr; dp_download_volume_handle &rArr; mcu_dp_value_update &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_volume_handle
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_suck_handle
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_roll_brush_handle
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_power_handle
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_power_go_handle
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_mop_handle
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_mode_handle
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_hypa_handle
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_filter_handle
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_edge_brush_handle
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_directioncontrol_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_point_handle
</UL>

<P><STRONG><a name="[176]"></a>exti_flag_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32f30x_exti.o(i.exti_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI5_9_IRQHandler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI10_15_IRQHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[175]"></a>exti_flag_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32f30x_exti.o(i.exti_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI5_9_IRQHandler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI10_15_IRQHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[2b3]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[303]"></a>fputc</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, fputc.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar
</UL>

<P><STRONG><a name="[2ae]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Report_Map
</UL>

<P><STRONG><a name="[311]"></a>getRunTimeCounterValue</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, freertos.o(i.getRunTimeCounterValue))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[315]"></a>get_check_sum</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, system.o(i.get_check_sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = get_check_sum
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_service
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_frame
</UL>

<P><STRONG><a name="[2dd]"></a>get_download_cmd_total</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, protocol.o(i.get_download_cmd_total))
<BR><BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dowmload_dpid_index
</UL>

<P><STRONG><a name="[314]"></a>get_queue_total_data</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, system.o(i.get_queue_total_data))
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_service
</UL>

<P><STRONG><a name="[2c4]"></a>get_wifi_status</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, protocol.o(i.get_wifi_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_wifi_status
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speaker
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
</UL>

<P><STRONG><a name="[137]"></a>mPC_NavDebug</STRONG> (Thumb, 50 bytes, Stack size 48 bytes, debug.o(i.mPC_NavDebug))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = mPC_NavDebug &rArr; UpgradeNavData_simple
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpgradeNavData_simple
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendNavData
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_UpdatePosition
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_Initialize
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_SetCell
</UL>

<P><STRONG><a name="[47]"></a>main</STRONG> (Thumb, 204 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = main &rArr; USART3_CreateTask &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_CreateTask
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_CreateMainTask
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_CreateCalculatePathTask
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_CraeteSensorsTask
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_CraeteControlTask
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_SetCurrentBaselineAdc
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInitialize
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Wifi_Enable
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Upgrade_Flag
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_5v
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_EnableAll
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_DisableAll
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_SetMode
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_GetStatus
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Upgrade_Flag
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBaseLineADCV
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[2ad]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Report_Map
</UL>

<P><STRONG><a name="[2bc]"></a>mcu_dp_bool_update</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, mcu_api.o(i.mcu_dp_bool_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mcu_dp_bool_update &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_frame
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wifi_uart_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_data_update
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_power_handle
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_power_go_handle
</UL>

<P><STRONG><a name="[2a6]"></a>mcu_dp_enum_update</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, mcu_api.o(i.mcu_dp_enum_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mcu_dp_enum_update &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_frame
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wifi_uart_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Even_Report
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_data_update
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_suck_handle
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_roll_brush_handle
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_mop_handle
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_mode_handle
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_hypa_handle
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_filter_handle
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_edge_brush_handle
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_directioncontrol_handle
</UL>

<P><STRONG><a name="[2bd]"></a>mcu_dp_fault_update</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, mcu_api.o(i.mcu_dp_fault_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mcu_dp_fault_update &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_frame
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wifi_uart_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_data_update
</UL>

<P><STRONG><a name="[2a4]"></a>mcu_dp_string_update</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, mcu_api.o(i.mcu_dp_string_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = mcu_dp_string_update &rArr; set_wifi_uart_buffer &rArr; my_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_frame
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wifi_uart_byte
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wifi_uart_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Clean_Record_Report
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_data_update
</UL>

<P><STRONG><a name="[2a5]"></a>mcu_dp_value_update</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, mcu_api.o(i.mcu_dp_value_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mcu_dp_value_update &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_frame
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wifi_uart_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Even_Report
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_data_update
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_volume_handle
</UL>

<P><STRONG><a name="[2c7]"></a>mcu_firm_update_handle</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, protocol.o(i.mcu_firm_update_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mcu_firm_update_handle &rArr; Set_Upgrade_Flag &rArr; W25QXX_Write &rArr; W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speaker
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Upgrade_Flag
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
</UL>

<P><STRONG><a name="[2da]"></a>mcu_get_dp_download_bool</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mcu_api.o(i.mcu_get_dp_download_bool))
<BR><BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_power_handle
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_power_go_handle
</UL>

<P><STRONG><a name="[2ce]"></a>mcu_get_dp_download_enum</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mcu_api.o(i.mcu_get_dp_download_enum))
<BR><BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_suck_handle
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_roll_brush_handle
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_mop_handle
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_mode_handle
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_hypa_handle
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_filter_handle
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_edge_brush_handle
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_directioncontrol_handle
</UL>

<P><STRONG><a name="[2dc]"></a>mcu_get_dp_download_value</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mcu_api.o(i.mcu_get_dp_download_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mcu_get_dp_download_value
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byte_to_int
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_volume_handle
</UL>

<P><STRONG><a name="[2c8]"></a>mcu_get_greentime</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, protocol.o(i.mcu_get_greentime))
<BR><BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
</UL>

<P><STRONG><a name="[24c]"></a>mcu_get_system_time</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mcu_api.o(i.mcu_get_system_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mcu_get_system_time &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_MainTask
</UL>

<P><STRONG><a name="[278]"></a>mcu_set_wifi_mode</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, mcu_api.o(i.mcu_set_wifi_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mcu_set_wifi_mode &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_frame
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wifi_uart_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Interface
</UL>

<P><STRONG><a name="[2c9]"></a>mcu_write_rtctime</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, protocol.o(i.mcu_write_rtctime))
<BR><BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
</UL>

<P><STRONG><a name="[305]"></a>my_memcpy</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, mcu_api.o(i.my_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = my_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_service
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wifi_uart_buffer
</UL>

<P><STRONG><a name="[2e9]"></a>my_strlen</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mcu_api.o(i.my_strlen))
<BR><BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;product_info_update
</UL>

<P><STRONG><a name="[1c9]"></a>nvic_irq_enable</STRONG> (Thumb, 156 bytes, Stack size 20 bytes, gd32f30x_misc.o(i.nvic_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nvic_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[1c8]"></a>nvic_priority_group_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f30x_misc.o(i.nvic_priority_group_set))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[d7]"></a>osDelay</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, cmsis_os.o(i.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Charge_Current
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_Follow_Mode
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standby_Mode
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_Mode
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HomeStraight_Mode
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gyro_Cmd
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MapTouring
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_GyroFunction
</UL>

<P><STRONG><a name="[21e]"></a>osSystickHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cmsis_os.o(i.osSystickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osSystickHandler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[2e8]"></a>putchar</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, putchar.o(i.putchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printchar
</UL>

<P><STRONG><a name="[2ed]"></a>pvPortMalloc</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, heap_2.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack
</UL>

<P><STRONG><a name="[31c]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(i.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[31f]"></a>pxPortInitialiseStack</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[1fa]"></a>rcu_adc_clock_config</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, gd32f30x_rcu.o(i.rcu_adc_clock_config))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[2bf]"></a>rcu_periph_reset_disable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f30x_rcu.o(i.rcu_periph_reset_disable))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_deinit
</UL>

<P><STRONG><a name="[2be]"></a>rcu_periph_reset_enable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32f30x_rcu.o(i.rcu_periph_reset_enable))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_deinit
</UL>

<P><STRONG><a name="[2e0]"></a>set_wifi_uart_buffer</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, system.o(i.set_wifi_uart_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = set_wifi_uart_buffer &rArr; my_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;product_info_update
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_trans
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_string_update
</UL>

<P><STRONG><a name="[2aa]"></a>set_wifi_uart_byte</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, system.o(i.set_wifi_uart_byte))
<BR><BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_set_wifi_mode
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Stop_Stream_trans
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heat_beat_check
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Package_Choose
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_trans
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_value_update
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_string_update
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_fault_update
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_enum_update
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_bool_update
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Update_MapReport_Init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Start_Stream_trans
</UL>

<P><STRONG><a name="[2af]"></a>stream_trans</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, mcu_api.o(i.stream_trans))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = stream_trans &rArr; set_wifi_uart_buffer &rArr; my_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_frame
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wifi_uart_byte
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wifi_uart_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Report_Map
</UL>

<P><STRONG><a name="[230]"></a>timer_interrupt_flag_clear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f30x_timer.o(i.timer_interrupt_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER6_IRQHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER5_IRQHandler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[22f]"></a>timer_interrupt_flag_get</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32f30x_timer.o(i.timer_interrupt_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER6_IRQHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER5_IRQHandler
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[270]"></a>uart_receive_input</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, mcu_api.o(i.uart_receive_input))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[307]"></a>uart_transmit_output</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, protocol.o(i.uart_transmit_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_transmit_output
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Transmit_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_data
</UL>

<P><STRONG><a name="[6c]"></a>ups3</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usart.o(i.ups3))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ups3 &rArr; Debug_Write_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_Write_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserInterFace_BeginToWork
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_WallFineWay
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_GetPressKey
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SensorsTask
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_CalculatePathTask
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charge_Process
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Stop_Stream_trans
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_Follow_Mode
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Interface
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_CreateTask
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_CreateMainTask
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_CreateCalculatePathTask
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_CraeteSensorsTask
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_CraeteControlTask
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standby_Mode
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_Mode
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Mode
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HomeStraight_Mode
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToMap
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MapTouring
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_HeadToCourse
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_Capacity_Reset
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_GyroFunction
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_MainTask
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_Forward_PidProcess
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_SetHomeCellEmpty
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_Next_V2
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_BlockAllTargetPoints
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathList_GetNextPathListPoint
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_WallTrackUpdate
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetCellAcreage
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_FillGap
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_AdjustBoundary
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_RealMap_AddPoint
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_UpdateStrBlock
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_Move_Turn
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_Move_Back
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_HeadToTarget
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adjust_Home_Path
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_AbnormalHandler
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathPoint_ReadPoint
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathPoint_AddOnePoint
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathList_ShowAll
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathList_Out
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathList_AddNewPoint
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_SetCell
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetCell
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallToMap
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_UpdateMapBumper
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_SetDir
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_PathPlanning
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_IsLaneCleaned
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_GetNextLanePos
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_ClearCleanCells
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathPoint_SortPoints
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShortestPath_CreatePathPoint
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathPoint_EditPoint
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathLine_FindNextLines
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathLine_FindAllLines
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathLine_AddLine
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineList_GetNextLowPriorityPoint
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShortestPath_GeneratePath
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetList_Rearrange
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetList_ReadTarget
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetList_CreateList
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetList_AddTarget
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_NormalClean
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_LaneCleaned
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_WallTrackAdd
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_SetBoundary
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_RealMap_ReadPoint
</UL>

<P><STRONG><a name="[26e]"></a>usart_flag_clear</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gd32f30x_usart.o(i.usart_flag_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[26f]"></a>usart_flag_get</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gd32f30x_usart.o(i.usart_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[26d]"></a>usart_interrupt_flag_get</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gd32f30x_usart.o(i.usart_interrupt_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_interrupt_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[6b]"></a>usprintf</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printf-stdarg.o(i.usprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserInterFace_BeginToWork
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_WallFineWay
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_GetPressKey
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SensorsTask
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_CalculatePathTask
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charge_Process
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Stop_Stream_trans
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_Follow_Mode
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Interface
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_CreateTask
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_CreateMainTask
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_CreateCalculatePathTask
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_CraeteSensorsTask
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_CraeteControlTask
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standby_Mode
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_Mode
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Mode
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HomeStraight_Mode
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToMap
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MapTouring
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_HeadToCourse
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Battery_Capacity_Reset
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_GyroFunction
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_MainTask
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel_Forward_PidProcess
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_SetHomeCellEmpty
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_Next_V2
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_BlockAllTargetPoints
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathList_GetNextPathListPoint
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_WallTrackUpdate
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetCellAcreage
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_FillGap
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_AdjustBoundary
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_RealMap_AddPoint
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_UpdateStrBlock
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_Move_Turn
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_Move_Back
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_HeadToTarget
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adjust_Home_Path
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_AbnormalHandler
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathPoint_ReadPoint
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathPoint_AddOnePoint
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathList_ShowAll
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathList_Out
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathList_AddNewPoint
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_SetCell
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_GetCell
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallToMap
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_UpdateMapBumper
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_SetDir
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_PathPlanning
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_IsLaneCleaned
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_GetNextLanePos
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_ClearCleanCells
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathPoint_SortPoints
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShortestPath_CreatePathPoint
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathPoint_EditPoint
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathLine_FindNextLines
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathLine_FindAllLines
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PathLine_AddLine
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineList_GetNextLowPriorityPoint
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShortestPath_GeneratePath
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetList_Rearrange
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetList_ReadTarget
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetList_CreateList
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetList_AddTarget
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_NormalClean
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Path_LaneCleaned
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_WallTrackAdd
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Map_SetBoundary
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_RealMap_ReadPoint
</UL>

<P><STRONG><a name="[2f3]"></a>uxListRemove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[272]"></a>uxQueueMessagesWaiting</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, queue.o(i.uxQueueMessagesWaiting))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uxQueueMessagesWaiting
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_PrintStringByLength
</UL>

<P><STRONG><a name="[309]"></a>vApplicationStackOverflowHook</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, projecttask.o(i.vApplicationStackOverflowHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = vApplicationStackOverflowHook &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ups3
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[2fd]"></a>vListInitialise</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>

<P><STRONG><a name="[2fb]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTCBVariables
</UL>

<P><STRONG><a name="[2eb]"></a>vListInsert</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[30d]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[2f2]"></a>vPortEnterCritical</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
</UL>

<P><STRONG><a name="[2f4]"></a>vPortExitCritical</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
</UL>

<P><STRONG><a name="[2ee]"></a>vPortFree</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, heap_2.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack
</UL>

<P><STRONG><a name="[317]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[30a]"></a>vPortValidateInterruptPriority</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, port.o(i.vPortValidateInterruptPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortGetIPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
</UL>

<P><STRONG><a name="[94]"></a>vTaskDelay</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserInterFace_BeginToWork
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Interface
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_StoreMotorBaseline
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Mode
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HomeStraight_Mode
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Action_Stop
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_Move_Turn
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_Move_Back
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_PrintStringByLength
</UL>

<P><STRONG><a name="[bb]"></a>vTaskDelayUntil</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, tasks.o(i.vTaskDelayUntil))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vTaskDelayUntil &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SensorsTask
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ControlTask
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_Follow_Mode
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Interface
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_Mode
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Mode
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HomeStraight_Mode
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MapTouring
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_GyroFunction
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_AbnormalHandler
</UL>

<P><STRONG><a name="[302]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[30c]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[30e]"></a>vTaskPriorityInherit</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, tasks.o(i.vTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[31d]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, tasks.o(i.vTaskSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
</UL>

<P><STRONG><a name="[2df]"></a>vTaskStartScheduler</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = vTaskStartScheduler &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureTimerForRunTimeStats
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2f0]"></a>vTaskSuspendAll</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[54]"></a>vTaskSwitchContext</STRONG> (Thumb, 226 bytes, Stack size 8 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; usprintf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRunTimeCounterValue
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[247]"></a>wifi_protocol_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mcu_api.o(i.wifi_protocol_init))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_MainTask
</UL>

<P><STRONG><a name="[2ca]"></a>wifi_test_result</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, protocol.o(i.wifi_test_result))
<BR><BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
</UL>

<P><STRONG><a name="[241]"></a>wifi_uart_service</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, mcu_api.o(i.wifi_uart_service))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = wifi_uart_service &rArr; data_handle &rArr; data_point_handle &rArr; dp_download_handle &rArr; dp_download_volume_handle &rArr; mcu_dp_value_update &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_queue_total_data
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_check_sum
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_Read_Byte
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ControlTask
</UL>

<P><STRONG><a name="[2a8]"></a>wifi_uart_write_frame</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, system.o(i.wifi_uart_write_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_data
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_check_sum
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_set_wifi_mode
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_get_system_time
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Stop_Stream_trans
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;product_info_update
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heat_beat_check
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mcu_wifi_mode
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Rece_Package_Report
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Package_Choose
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_trans
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_value_update
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_string_update
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_fault_update
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_enum_update
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_bool_update
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Update_MapReport_Init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Start_Stream_trans
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Open_Stream_trans
</UL>

<P><STRONG><a name="[310]"></a>xPortStartScheduler</STRONG> (Thumb, 282 bytes, Stack size 16 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[2e3]"></a>xPortSysTickHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, port.o(i.xPortSysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSystickHandler
</UL>

<P><STRONG><a name="[237]"></a>xQueueGenericCreate</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_CalculatePathTask
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_CreateTask
</UL>

<P><STRONG><a name="[152]"></a>xQueueGenericReceive</STRONG> (Thumb, 418 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_CalculatePathTask
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_PrintTask
</UL>

<P><STRONG><a name="[31b]"></a>xQueueGenericReset</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[150]"></a>xQueueGenericSend</STRONG> (Thumb, 404 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_CalculatePathTask
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_CreateTask
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_PrintStringByLength
</UL>

<P><STRONG><a name="[163]"></a>xQueueGiveFromISR</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, queue.o(i.xQueueGiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_Channel3_IRQHandler
</UL>

<P><STRONG><a name="[31e]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[243]"></a>xTaskGenericCreate</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, tasks.o(i.xTaskGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTCBVariables
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_CreateTask
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_CreateMainTask
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_CreateCalculatePathTask
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_CraeteSensorsTask
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_CraeteControlTask
</UL>

<P><STRONG><a name="[2e2]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSystickHandler
</UL>

<P><STRONG><a name="[a8]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_SensorsTask
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_ControlTask
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wall_Follow_Mode
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Interface
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spot_Mode
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Mode
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HomeStraight_Mode
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MapTouring
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_GyroFunction
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_WallFollowByCnt
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_Move_Turn
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_Move_Back
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_MoveToPosition
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_AbnormalHandler
</UL>

<P><STRONG><a name="[31a]"></a>xTaskIncrementTick</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>

<P><STRONG><a name="[2f9]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[301]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[2f1]"></a>xTaskResumeAll</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[2cd]"></a>dp_download_directioncontrol_handle</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, protocol.o(i.dp_download_directioncontrol_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dp_download_directioncontrol_handle &rArr; mcu_dp_enum_update &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_SetRemoteCode
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_get_dp_download_enum
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_enum_update
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_handle
</UL>

<P><STRONG><a name="[2d0]"></a>dp_download_edge_brush_handle</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, protocol.o(i.dp_download_edge_brush_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dp_download_edge_brush_handle &rArr; mcu_dp_enum_update &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_get_dp_download_enum
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_enum_update
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_handle
</UL>

<P><STRONG><a name="[2d1]"></a>dp_download_filter_handle</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, protocol.o(i.dp_download_filter_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dp_download_filter_handle &rArr; mcu_dp_enum_update &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_get_dp_download_enum
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_enum_update
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_handle
</UL>

<P><STRONG><a name="[2d7]"></a>dp_download_hypa_handle</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, protocol.o(i.dp_download_hypa_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dp_download_hypa_handle &rArr; mcu_dp_enum_update &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_get_dp_download_enum
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_enum_update
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_handle
</UL>

<P><STRONG><a name="[2d3]"></a>dp_download_mode_handle</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, protocol.o(i.dp_download_mode_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dp_download_mode_handle &rArr; mcu_dp_enum_update &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_SetMode
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode_GetMode
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wifi_Mode_SetMode
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_get_dp_download_enum
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_enum_update
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_handle
</UL>

<P><STRONG><a name="[2d8]"></a>dp_download_mop_handle</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, protocol.o(i.dp_download_mop_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dp_download_mop_handle &rArr; mcu_dp_enum_update &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_get_dp_download_enum
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_enum_update
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_handle
</UL>

<P><STRONG><a name="[2d5]"></a>dp_download_power_go_handle</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, protocol.o(i.dp_download_power_go_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dp_download_power_go_handle &rArr; mcu_dp_bool_update &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_get_dp_download_bool
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_bool_update
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_handle
</UL>

<P><STRONG><a name="[2d2]"></a>dp_download_power_handle</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, protocol.o(i.dp_download_power_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dp_download_power_handle &rArr; mcu_dp_bool_update &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_get_dp_download_bool
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_bool_update
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_handle
</UL>

<P><STRONG><a name="[2d9]"></a>dp_download_roll_brush_handle</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, protocol.o(i.dp_download_roll_brush_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dp_download_roll_brush_handle &rArr; mcu_dp_enum_update &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_get_dp_download_enum
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_enum_update
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_handle
</UL>

<P><STRONG><a name="[2d4]"></a>dp_download_suck_handle</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, protocol.o(i.dp_download_suck_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dp_download_suck_handle &rArr; mcu_dp_enum_update &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_VacMode
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_get_dp_download_enum
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_enum_update
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_handle
</UL>

<P><STRONG><a name="[2d6]"></a>dp_download_volume_handle</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, protocol.o(i.dp_download_volume_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dp_download_volume_handle &rArr; mcu_dp_value_update &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_get_dp_download_value
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_value_update
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_handle
</UL>

<P><STRONG><a name="[2c5]"></a>data_point_handle</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, system.o(i.data_point_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = data_point_handle &rArr; dp_download_handle &rArr; dp_download_volume_handle &rArr; mcu_dp_value_update &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dowmload_dpid_index
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
</UL>

<P><STRONG><a name="[2cb]"></a>get_dowmload_dpid_index</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, system.o(i.get_dowmload_dpid_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_dowmload_dpid_index
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_download_cmd_total
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_point_handle
</UL>

<P><STRONG><a name="[2c3]"></a>get_mcu_wifi_mode</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, system.o(i.get_mcu_wifi_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_mcu_wifi_mode &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
</UL>

<P><STRONG><a name="[2c1]"></a>heat_beat_check</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, system.o(i.heat_beat_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = heat_beat_check &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_frame
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wifi_uart_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
</UL>

<P><STRONG><a name="[2c2]"></a>product_info_update</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, system.o(i.product_info_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = product_info_update &rArr; set_wifi_uart_buffer &rArr; my_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_frame
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wifi_uart_buffer
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
</UL>

<P><STRONG><a name="[316]"></a>wifi_uart_write_data</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, system.o(i.wifi_uart_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wifi_uart_write_data &rArr; uart_transmit_output
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_transmit_output
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_frame
</UL>

<P><STRONG><a name="[2e4]"></a>print</STRONG> (Thumb, 368 bytes, Stack size 56 bytes, printf-stdarg.o(i.print))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = print &rArr; printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prints
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printi
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printchar
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
</UL>

<P><STRONG><a name="[2e7]"></a>printchar</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, printf-stdarg.o(i.printchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prints
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printi
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>

<P><STRONG><a name="[2e6]"></a>printi</STRONG> (Thumb, 186 bytes, Stack size 72 bytes, printf-stdarg.o(i.printi))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = printi &rArr; prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prints
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printchar
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>

<P><STRONG><a name="[2e5]"></a>prints</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, printf-stdarg.o(i.prints))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prints &rArr; printchar &rArr; putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printchar
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printi
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>

<P><STRONG><a name="[2f6]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[2f8]"></a>prvCopyDataToQueue</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[2fe]"></a>prvIsQueueEmpty</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[2ff]"></a>prvIsQueueFull</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueFull
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[300]"></a>prvUnlockQueue</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[2ea]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[2ec]"></a>prvAllocateTCBAndStack</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, tasks.o(i.prvAllocateTCBAndStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[2ef]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[2f5]"></a>prvDeleteTCB</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[51]"></a>prvIdleTask</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[2fa]"></a>prvInitialiseTCBVariables</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, tasks.o(i.prvInitialiseTCBVariables))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvInitialiseTCBVariables
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[2fc]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, tasks.o(i.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[320]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[304]"></a>prvHeapInit</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, heap_2.o(i.prvHeapInit))
<BR><BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[50]"></a>prvTaskExitError</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[306]"></a>system_clock_120m_hxtal</STRONG> (Thumb, 266 bytes, Stack size 0 bytes, system_gd32f30x.o(i.system_clock_120m_hxtal))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[21f]"></a>system_clock_config</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_gd32f30x.o(i.system_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = system_clock_config
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_120m_hxtal
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
